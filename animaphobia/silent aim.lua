local fastCast = require(game:GetService("ReplicatedStorage").Modules.FastCastRedux)

_G.defFastCast = _G.defFastCast or fastCast.FireWithBlacklist

local lplr = game:GetService('Players').LocalPlayer

local cam = workspace.CurrentCamera
local mouse = lplr:GetMouse()

local function findNpc(position)
    local waifusFolder = game.Workspace.OtherWaifus
    local closestWaifu = nil
    local shortestDistance = nil

    for _, waifu in pairs(waifusFolder:GetChildren()) do
        if waifu:IsA("Model") and waifu:FindFirstChild('Head') and waifu:FindFirstChildOfClass("Humanoid") and waifu:FindFirstChildOfClass("Humanoid").Health>0 then
            local dir = (waifu.Head.Position-position)
            local obj = workspace:FindPartOnRayWithIgnoreList(Ray.new(position, dir), {lplr.Character})
            if not waifu:IsAncestorOf(obj) then continue end
            local distance = dir.magnitude+(1-mouse.UnitRay.Direction:Dot(dir.Unit))*10000
            if shortestDistance == nil or distance < shortestDistance then
                closestWaifu = waifu.Head.Position
                shortestDistance = distance
            end
        end
    end
    for _, waifu in pairs(game.Workspace.Waifus:GetChildren()) do
        if waifu:IsA("Model") and waifu:FindFirstChild('Head') and waifu:FindFirstChildOfClass("Humanoid") and waifu:FindFirstChildOfClass("Humanoid").Health>0 then
            local distance = (position - waifu.Head.Position).magnitude
            if shortestDistance == nil or distance < shortestDistance and distance <300 then
                closestWaifu = waifu.Head.Position
                shortestDistance = distance
            end
        end
    end

    return closestWaifu
end

fastCast.FireWithBlacklist = function(...)
    local args = {...}

    local closestNpc = findNpc(args[2])

    if closestNpc then
        --args[2] = closestNpc+Vector3.new(0, 1.5, 0)
        args[3] = (closestNpc-args[2])*150000
        args[4] = args[3]
    end
    
    _G.defFastCast(table.unpack(args))
end
