---@diagnostic disable: redefined-local
names = {'Slab Block','Wall','Submersible','Four-Way','T-Junction','Cap','Pipe','Distributor','Fabricator','Distributor Cap','Spawn Point','Arc Turret','Point Defense','Shield Generator','Automechanic','Upgrade Station','Arsenal','Reservoir','Elbow',};
attachments = {'WallSnap2','WallSnap1','FemaleFlange','FemaleFlange3','FemaleFlange1','FemaleFlange2','FemaleFlange4',};
local n = nil
local cf = function(xp, yp, zp, xr, yr, zr)
	return cfn(xp, yp, zp)*cfa(xr,yr,zr)
end



cfn, cfa = CFrame.new, CFrame.fromEulerAnglesYXZ
local tbl = {
	{1,cf(-0.01,-0.51,17.125,-0,-3.14,-0),0,n,n,n,n},{2,cf(-0.075,4.175,5.635,1.57,3.14,0),0,n,n,n,n},{2,cf(8,-2,0,-0,-0,0),1,1,2,1,n},{2,cf(-8,-2,0,-0,3.14,0),1,2,2,1,n},{1,cf(0.14,9.32,5.675,-0,-3.14,-0),0,n,n,n,n},{3,cf(0.03,10.47,4.49,-0,0,0),0,n,n,n,n},{4,cf(-0.8,-2.1,0,1.57,1.57,0),1,3,6,4,n},{5,cf(0,-2.1,0.8,1.57,3.14,0),1,5,7,4,n},{2,cf(12.915,7.695,-9.745,-0,3.14,0),0,n,n,n,n},{2,cf(-13.075,7.695,-9.845,-0,3.14,-0),0,n,n,n,n},{4,cf(0,-2.1,0.8,1.57,3.14,0),1,5,8,4,n},{6,cf(0.425,-0.4,0.425,-1.57,0.785,0),1,6,11,n,n},{6,cf(-0.3,-0.4,0.52,-1.57,-0.525,0),1,7,11,n,n},{5,cf(0.8,-2.1,-0,1.57,-1.57,0),1,5,11,4,n},{7,cf(-0.025,27.47,-15.87,-1.57,-0,0),3,14,6,n,n},{5,cf(0.8,-1.4,-0,-0,-3.14,-1.57),1,6,15,6,n},{8,cf(18.785,29.21,-13.17,-0,-1.57,1.57),0,n,n,n,n},{7,cf(0,0,0,-0,0,0),2,17,16,3,4},{8,cf(-19.005,29.23,-13.27,0,1.57,-1.57),0,n,n,n,n},{7,cf(0,0,0,-0,0,0),2,19,16,3,5},{3,cf(-4.1,10.47,5.885,0,-0,0),0,n,n,n,n},{7,cf(0,0,0,-0,0,0),2,21,7,3,7},{2,cf(-0,-2,8,0,-1.57,0),1,2,10,1,n},{9,cf(-24.165,4.34,-17.59,-1.57,1.57,0),0,n,n,n,n},{10,cf(-0.58,-0.4,-0.155,-1.57,-1.835,0),1,3,24,n,n},{3,cf(4.16,10.47,5.85,-0,0,0),0,n,n,n,n},{7,cf(0,0,0,-0,0,0),2,26,7,3,6},{9,cf(-24.16,4.315,-13.215,-1.57,1.57,0),0,n,n,n,n},{10,cf(-0.58,-0.4,0.155,-1.57,-1.31,0),1,3,28,n,n},{11,cf(-15.98,21.305,-13.27,-0,-1.57,1.57),0,n,n,n,n},{10,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,3,30,n,n},{12,cf(-17.655,20.555,-3.645,-0,3.14,1.57),0,n,n,n,n},{10,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,3,32,n,n},{3,cf(-0.01,12.85,4.5,0,0,-0),0,n,n,n,n},{4,cf(-0.8,-2.1,0,1.57,1.57,0),1,3,34,4,n},{4,cf(0,-2.1,0.8,1.57,3.14,0),1,5,35,4,n},{6,cf(0,-0.4,0.6,-1.57,-0,0),1,5,36,n,n},{7,cf(0,0,0,-0,0,0),2,8,36,6,6},{3,cf(-4.11,12.85,5.8,0,0,-0),0,n,n,n,n},{7,cf(0,0,0,-0,0,0),2,39,35,3,7},{9,cf(-24.16,4.335,-8.855,-1.57,0.48,1.09),0,n,n,n,n},{10,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,3,41,n,n},{3,cf(4.125,12.85,5.915,0,0,-0),0,n,n,n,n},{7,cf(0,0,0,-0,0,0),2,43,35,3,6},{2,cf(0,-2,8,0,-1.57,0),1,1,9,1,n},{9,cf(24.01,4.395,-17.52,-1.57,-1.57,0),0,n,n,n,n},{10,cf(-0.58,-0.4,0.155,-1.57,-1.31,0),1,3,46,n,n},{9,cf(24.01,4.365,-12.925,-1.57,-1.57,0),0,n,n,n,n},{10,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,3,48,n,n},{3,cf(0.085,15.225,4.455,0,-0,-0),0,n,n,n,n},{4,cf(-0.8,-2.1,0,1.57,1.57,0),1,3,50,4,n},{4,cf(0,-2.1,0.8,1.57,3.14,0),1,5,51,4,n},{6,cf(0,-0.4,0.6,-1.57,-0,0),1,5,52,n,n},{7,cf(0,0,0,-0,0,0),2,36,52,7,7},{3,cf(4.185,15.225,5.77,0,0,-0),0,n,n,n,n},{7,cf(0,0,0,-0,0,0),2,55,51,3,6},{3,cf(-4.1,15.225,5.645,0,0,-0),0,n,n,n,n},{7,cf(0,0,0,-0,0,0),2,57,51,3,7},{9,cf(-24.16,4.335,-4.58,-1.57,-1.57,3.14),0,n,n,n,n},{10,cf(-0.58,-0.4,-0.155,-1.57,-1.835,0),1,3,59,n,n},{9,cf(24.01,4.31,-8.575,-1.57,-1.57,0),0,n,n,n,n},{10,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,3,61,n,n},{9,cf(24.01,4.345,-4.325,-1.57,-1.57,0),0,n,n,n,n},{10,cf(-0.58,-0.4,0.155,-1.57,-1.31,0),1,3,63,n,n},{3,cf(0.05,17.605,4.45,0,0,-0),0,n,n,n,n},{3,cf(4.19,17.605,5.7,0,0,-0),0,n,n,n,n},{4,cf(-0.8,-2.1,0,1.57,1.57,0),1,3,65,4,n},{4,cf(0,-2.1,0.8,1.57,3.14,0),1,5,67,4,n},{6,cf(0,-0.4,0.6,-1.57,-0,0),1,5,68,n,n},{7,cf(0,0,0,-0,0,0),2,52,68,6,6},{7,cf(0,0,0,-0,0,0),2,66,67,3,6},{3,cf(-4.085,17.605,5.58,0,0,-0),0,n,n,n,n},{7,cf(0,0,0,-0,0,0),2,72,67,3,7},{12,cf(17.49,20.89,-3.915,0,-3.14,-1.57),0,n,n,n,n},{10,cf(-0.52,-0.4,0.3,-1.57,-1.045,0),1,3,74,n,n},{13,cf(-13.245,8.86,-21.765,1.57,-3.14,0),0,n,n,n,n},{10,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,3,76,n,n},{13,cf(12.92,8.33,-21.765,1.57,3.14,0),0,n,n,n,n},{10,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,3,78,n,n},{14,cf(-25.92,9.34,-8.72,0,-0,1.31),0,n,n,n,n},{14,cf(-25.24,14.375,-8.805,-0,0,1.31),0,n,n,n,n},{14,cf(-24.5,20.015,-8.805,-0,-0,1.57),0,n,n,n,n},{14,cf(-24.5,25.21,-8.79,-0,-0,1.57),0,n,n,n,n},{10,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,3,80,n,n},{10,cf(-0.6,-0.4,-0,-1.57,-1.57,0),1,3,81,n,n},{10,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,3,82,n,n},{10,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,3,83,n,n},{14,cf(25.67,9.975,-8.57,0,-0,-1.31),0,n,n,n,n},{14,cf(25.015,14.85,-8.605,0,0,-1.31),0,n,n,n,n},{14,cf(24.34,20.45,-8.59,-0,0,-1.57),0,n,n,n,n},{14,cf(24.34,25.405,-8.605,0,-0,-1.57),0,n,n,n,n},{10,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,3,88,n,n},{10,cf(-0.6,-0.4,-0,-1.57,-1.57,0),1,3,89,n,n},{10,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,3,90,n,n},{10,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,3,91,n,n},{15,cf(-21.14,31.69,5.01,0,-0,0),0,n,n,n,n},{10,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,3,96,n,n},{15,cf(20.97,31.69,5.98,0,-0,0),0,n,n,n,n},{10,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,3,98,n,n},{15,cf(-21.245,31.69,-9.26,-0,0,0),0,n,n,n,n},{10,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,3,100,n,n},{15,cf(21.07,31.69,-9.455,-0,0,0),0,n,n,n,n},{10,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,3,102,n,n},{3,cf(-0.01,19.985,4.41,0,0,-0),0,n,n,n,n},{3,cf(-4.155,19.985,5.515,0,0,-0),0,n,n,n,n},{3,cf(4.195,19.985,5.705,0,0,-0),0,n,n,n,n},{4,cf(-0.8,-2.1,0,1.57,1.57,0),1,3,104,4,n},{4,cf(0,-2.1,0.8,1.57,3.14,0),1,5,107,4,n},{7,cf(0,0,0,-0,0,0),2,107,106,6,3},{7,cf(0,0,0,-0,0,0),2,107,105,7,3},{7,cf(0,0,0,-0,0,0),2,68,108,7,7},{16,cf(-12.145,21.27,-14.47,0,1.57,-1.57),0,n,n,n,n},{7,cf(0,0,0,-0,0,0),2,112,108,3,5},{3,cf(0.065,22.365,4.405,0,0,-0),0,n,n,n,n},{3,cf(4.185,22.365,5.685,0,0,-0),0,n,n,n,n},{3,cf(-4.12,22.365,5.465,0,0,-0),0,n,n,n,n},{4,cf(-0.8,-2.1,0,1.57,1.57,0),1,3,114,4,n},{4,cf(0,-2.1,0.8,1.57,3.14,0),1,5,117,4,n},{7,cf(0,0,0,-0,0,0),2,117,115,6,3},{7,cf(0,0,0,-0,0,0),2,117,116,7,3},{7,cf(0,0,0,-0,0,0),2,108,118,6,6},{17,cf(12.55,22.17,-13.27,1.57,-3.14,0),0,n,n,n,n},{7,cf(0,0,0,-0,0,0),2,122,118,3,5},{3,cf(0.075,24.745,4.44,0,0,-0),0,n,n,n,n},{4,cf(-0.8,-2.1,0,1.57,1.57,0),1,3,124,4,n},{4,cf(0,-2.1,0.8,1.57,3.14,0),1,5,125,4,n},{6,cf(-0.155,-0.4,0.58,-1.57,-0.26,0),1,5,126,n,n},{3,cf(-4.055,24.745,5.675,-0,0,0),0,n,n,n,n},{7,cf(0,0,0,-0,0,0),2,128,125,3,7},{3,cf(4.185,24.745,5.79,0,-0,-0),0,n,n,n,n},{7,cf(0,0,0,-0,0,0),2,130,125,3,6},{3,cf(0.08,27.125,4.54,0,0,-0),0,n,n,n,n},{7,cf(0,0,0,-0,0,0),2,118,126,7,7},{3,cf(4.16,27.125,5.66,0,0,-0),0,n,n,n,n},{4,cf(-0.8,-2.1,0,1.57,1.57,0),1,3,132,4,n},{4,cf(0,-2.1,0.8,1.57,3.14,0),1,5,135,4,n},{6,cf(0,-0.4,0.6,-1.57,0,0),1,5,136,n,n},{7,cf(0,0,0,-0,0,0),2,126,136,6,6},{3,cf(-4.015,27.125,5.615,0,0,-0),0,n,n,n,n},{7,cf(0,0,0,-0,0,0),2,139,135,3,7},{7,cf(0,0,0,-0,0,0),2,135,134,6,3},{3,cf(0.075,29.5,4.495,0,0,-0),0,n,n,n,n},{4,cf(-0.8,-2.1,0,1.57,1.57,0),1,3,142,4,n},{4,cf(0,-2.1,0.8,1.57,3.14,0),1,5,143,4,n},{6,cf(0,-0.4,0.6,-1.57,0,0),1,5,144,n,n},{7,cf(0,0,0,-0,0,0),2,136,144,7,7},{6,cf(0,-0.4,0.6,-1.57,0,0),1,6,144,n,n},{18,cf(-11.67,23.325,-6.325,1.57,0,0),0,n,n,n,n},{19,cf(0.575,-1,0.8,0,1.57,-1.57),1,3,148,6,n},{7,cf(0,0,0,-0,0,0),2,149,143,5,7},{18,cf(12.36,23.39,-6.22,1.57,0,0),0,n,n,n,n},{19,cf(0.575,-1,0.8,0,1.57,-1.57),1,3,151,6,n},{7,cf(0,0,0,-0,0,0),2,152,143,5,6},{15,cf(-12.7,30.935,4.555,1.31,3.14,-0),0,n,n,n,n},{10,cf(-0.6,-0.4,-0,-1.57,-1.57,0),1,3,154,n,n},{15,cf(11.175,31.085,4.68,1.31,3.14,-0),0,n,n,n,n},{10,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,3,156,n,n},{15,cf(12.14,16.31,4.52,-1.31,3.14,-3.14),0,n,n,n,n},{10,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,3,158,n,n},{15,cf(-12.185,16.25,4.415,-1.31,3.14,-3.14),0,n,n,n,n},{10,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,3,160,n,n},{15,cf(-17.955,27.105,-3.08,0,3.14,1.57),0,n,n,n,n},{10,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,3,162,n,n},{15,cf(17.79,27.16,-3.09,-0,-3.14,-1.57),0,n,n,n,n},{10,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,3,164,n,n},{15,cf(-12.465,31.69,-9.885,0,-1.57,0),0,n,n,n,n},{10,cf(-0.58,-0.4,0.155,-1.57,-1.31,0),1,3,166,n,n},{15,cf(11.725,31.69,-9.765,-0,1.57,0),0,n,n,n,n},{10,cf(-0.58,-0.4,-0.155,-1.57,-1.835,0),1,3,168,n,n},{13,cf(-0.445,37.34,-7.325,-1.57,0,0),0,n,n,n,n},{10,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,3,170,n,n},{13,cf(23.945,38.39,-1.775,0,1.57,0),0,n,n,n,n},{10,cf(-0.58,-0.4,-0.155,-1.57,-1.835,0),1,3,172,n,n},{13,cf(-23.075,38.325,-1.795,0,-1.57,0),0,n,n,n,n},{10,cf(-0.58,-0.4,0.155,-1.57,-1.31,0),1,3,174,n,n},{13,cf(-0.14,38.39,3.685,-0,-3.14,0),0,n,n,n,n},{10,cf(-0.58,-0.4,-0.155,-1.57,-1.835,0),1,3,176,n,n},{14,cf(24.34,28.205,0.365,-0,0,-1.57),0,n,n,n,n},{14,cf(24.34,23.265,0.4,-0,0,-1.57),0,n,n,n,n},{14,cf(24.34,18.235,0.35,-0,0,-1.57),0,n,n,n,n},{10,cf(-0.58,-0.4,-0.155,-1.57,-1.835,0),1,3,180,n,n},{10,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,3,179,n,n},{10,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,3,178,n,n},{14,cf(-24.5,28.35,0.3,0,0,1.57),0,n,n,n,n},{14,cf(-24.5,23.42,0.27,0,0,1.57),0,n,n,n,n},{14,cf(-24.5,18.455,0.215,0,0,1.57),0,n,n,n,n},{10,cf(-0.58,-0.4,0.155,-1.57,-1.31,0),1,3,186,n,n},{10,cf(-0.58,-0.4,0.155,-1.57,-1.31,0),1,3,185,n,n},{10,cf(-0.58,-0.4,0.155,-1.57,-1.31,0),1,3,184,n,n},{12,cf(-12.325,34.995,-5.395,-0,-3.14,-0),0,n,n,n,n},{10,cf(-0.52,-0.4,0.3,-1.57,-1.045,0),1,3,190,n,n},{12,cf(15.36,34.995,-5.065,-0,-3.14,-0),0,n,n,n,n},{10,cf(-0.58,-0.4,-0.155,-1.57,-1.835,0),1,3,192,n,n},}



--replace till this line


local remote = game:GetService("ReplicatedStorage").Shared.Remotes.PlaceStructure
local buttonRemote = game:GetService("ReplicatedStorage").Shared.Remotes.ContextButton
local lplr = game:GetService('Players').LocalPlayer
local mouse = lplr:GetMouse()
mouse.Button1Down:Wait()
local base = mouse.Target

local placed = {}
local structures = workspace:WaitForChild('Structures')
local run = game:GetService('RunService')


local partsToFind = {
	UpgradeStation = 'Part';
	Arsenal = 'TeamColor';
	['Point Defense'] = 'TeamColor'
}


local _mmreg = {}
local newline = [[
]]
local mmreg = setmetatable({},{
	__newindex = function(_, i, v)
		_mmreg[i..'min'] = _mmreg[i..'min'] ~= nil and math.min(v-15, _mmreg[i..'min']) or  math.huge
		_mmreg[i..'max'] = _mmreg[i..'max'] ~= nil and math.max(v+15, _mmreg[i..'max']) or -math.huge
	end;
	__index = function(_, i)
		return _mmreg[i]
	end;
	__tostring = function()
		local r = ''
		for i, v in pairs(_mmreg) do
			r..=i..' = '..v..newline
		end
		return r
	end
})

for _, v in ipairs(tbl) do
	local pos = v[2].Position
	mmreg.X = pos.X
	mmreg.Y = pos.Y
	mmreg.Z = pos.Z
end

local mincf = CFrame.new(_mmreg.Xmin,_mmreg.Ymin,_mmreg.Zmin)
local maxcf = CFrame.new(_mmreg.Xmax,_mmreg.Ymax,_mmreg.Zmax)

local p = Instance.new('Part', workspace.CurrentCamera)
p.Anchored = true
p.CanCollide = false
p.Material = Enum.Material.ForceField
p.Size = Vector3.new(maxcf.X-mincf.X,maxcf.Y-mincf.Y,maxcf.Z-mincf.Z)
p.Color = Color3.new(1,.2, .2)
p.CFrame =base.CFrame* CFrame.new( (maxcf.p+mincf.p)/2 )
local hsize = p.Size/2
local partCF = p.CFrame

task.delay(60*8, function()
	game.Debris:AddItem(p, 1)
end)

_rancalls = 0
local ranpos = function()
	_rancalls+=1
	if _rancalls>=10000 then
		_rancalls = math.random(-10000, 1000)
	end

	math.randomseed(_rancalls)
	return Vector3.new(
		math.random(-7000, 7000)
		,math.random(-7000, 7000)
		,math.random(-7000, 7000)
	)/40000
end


function isInsideBrick(position, brick)
	local v3 = brick.CFrame:PointToObjectSpace(position)
	return (math.abs(v3.X) <= brick.Size.X / 2)
		and (math.abs(v3.Y) <= brick.Size.Y / 2)
		and (math.abs(v3.Z) <= brick.Size.Z / 2)
end



local searchConnection

local shields = {}

local enableShield = function(found)
	local foundClone = found
	if foundClone.Name == 'Shield Generator' then
		coroutine.wrap(function()
			local enabled = shields[foundClone]
			if enabled == nil then
				shields[foundClone] = true
			else
				return
			end
			
			if foundClone:WaitForChild('EnableButton', 5) and foundClone.EnableButton:WaitForChild('ContextButton', 5) then
				task.wait(5)
				buttonRemote:FireServer(foundClone.EnableButton.ContextButton)
			end
		end)()
	end
end

local placeStructure = function(i, v, tries)
	local name = names[v[1]]
	print('loading', name)
	local placeMode = v[3]
	if placeMode == 0 then
		remote:FireServer(
			name
			,{
				['BasePart'] = base;
				['CFrame'] = v[2] + (tries <4 and Vector3.new() or ranpos())
			}
		)
	elseif placeMode == 1 then
		local needed = nil
		local s = os.clock()+2
		while needed == nil and os.clock()<s do
			for ii, vv in ipairs(placed[v[5]]:GetDescendants()) do
				if vv:IsA('BasePart') and vv.Name == attachments[ v[4] ] then
					needed = vv
					break
				end
			end
			run.RenderStepped:Wait()
		end
		remote:FireServer(
			name
			,{
				['BasePart'] = needed ;
				['CFrame'] = v[2]
			}
			,attachments[ v[6] or v[4] ]
			,needed
		)
	elseif placeMode == 2 then
		local needed1 = nil
		local s = os.clock()+2
		local cf1, cf2 = v[4], v[5]
		local attach1, attach2 = v[6], v[7]
		while needed1 == nil and os.clock()<s do
			for ii, vv in ipairs(placed[cf1]:GetDescendants()) do
				if vv:IsA('BasePart') and vv.Name == attachments[ attach1 ] then
					needed1 = vv
					break
				end
			end
			run.RenderStepped:Wait()
		end
		local needed2 = nil
		local s = os.clock()+2
		while needed2 == nil and os.clock()<s do
			for ii, vv in ipairs(placed[cf2]:GetDescendants()) do
				if vv:IsA('BasePart') and vv.Name == attachments[ attach2 ] then
					needed2 = vv
					break
				end
			end
			run.RenderStepped:Wait()
		end
		remote:FireServer(
			name
			,{
				[1]={ ['CFrame'] = needed1 };
				[2]= { ['CFrame'] = needed2 };
			}
		)
	elseif placeMode == 3 then
		local needed1 = nil
		local s = os.clock()+2
		local cf, basepart, attahment = v[2] , v[4], v[5]
		local attach1
		while needed1 == nil and os.clock()<s do
			for ii, vv in ipairs(placed[basepart]:GetDescendants()) do
				if vv:IsA('BasePart') and vv.Name == attachments[ attahment ] then
					needed1 = vv
					break
				end
			end
			run.RenderStepped:Wait()
		end
		remote:FireServer(
			name
			,{
				[1]={ ['CFrame'] = needed1 };
				[2]= { ['CFrame'] = cf, BasePart = base };
			}
		)
	end
end


local a, b = pcall(function()
	for i, v in ipairs(tbl) do
		local name = names[v[1]]
		local send = os.clock() + 60*2
		local tries = 0

		local found = false

		local con = structures.ChildAdded:Connect(function(nig)
			local model = nig
			if model.Name == name and model:WaitForChild('Builder', 5) then
				local ss = os.clock()+5
				while ss>os.clock() and model.PrimaryPart == nil do run.RenderStepped:Wait() end
				for _ = 0, 4, 0.016*2 do
					
					local modelPos = partsToFind[name] ~= nil and model:WaitForChild(partsToFind[name], 5).Position or (model.PrimaryPart and model.PrimaryPart.CFrame or (model:FindFirstChildOfClass('Part') or model:FindFirstChildOfClass('MeshPart')).CFrame ).Position

					if isInsideBrick(modelPos, p) then
						found = model
						break
					else
						run.RenderStepped:Wait()
						run.RenderStepped:Wait()
					end
				end
				if found == false then
					warn(model, 'didnt match')
				end
				
			end
		end)

		coroutine.wrap(function()
			while found == false and os.clock()<send do
				tries += 1
				placeStructure(i, v, tries)
				task.wait(.1)
			end
		end)()

		repeat run.RenderStepped:Wait() until found~=false or os.clock()>send
		con:Disconnect()
		if found then
			placed[i] = found
			enableShield(found)
		end
		
		if os.clock()>send then
			warn(i, v[i], 'failed')
			break
		end

	end
end)



p:Destroy()

print(a, b)