names = {'Slab Block','Submersible','Four-Way','Pipe','Cap','Wall','Distributor','Fabricator','Distributor Cap','Shield Generator','Spawn Point','Upgrade Station','Arc Turret','Automechanic','Reservoir','Point Defense','Arsenal',};
attachments = {'FemaleFlange','FemaleFlange3','FemaleFlange1','FemaleFlange2','FemaleFlange4','WallSnap1','WallSnap2',};
local n
local cf = function(xp, yp, zp, xr, yr, zr)
	return cfn(xp, yp, zp)*cfa(xr,yr,zr)
end
cfn, cfa = CFrame.new, CFrame.fromEulerAnglesYXZ
local tbl = {
{1,cf(0.0217,-0.5,17.2161,-0,-3.1416,0),0,n,n,n,n},{1,cf(-0.022500000000000003,-0.5,-17.2951,-0,0,-0),0,n,n,n,n},{2,cf(-0.0641,0.65,3.3422,-0,-0,0),0,n,n,n,n},{3,cf(-0.8,-2.1001000000000003,0.0002,1.5708,1.5708,0),1,1,3,2,n},{3,cf(0.0002,-2.1,0.8,1.5708,3.1416,0),1,3,4,2,n},{2,cf(4.3799,0.65,7.8948,-0,-0,0),0,n,n,n,n},{4,cf(0,0,0,-0,0,0),2,6,4,1,4},{2,cf(-4.5472,0.65,8.2455,-0,0,0),0,n,n,n,n},{4,cf(0,0,0,-0,0,0),2,8,4,1,5},{5,cf(-0.1553,-0.4,0.5796,-1.5708,-0.26180000000000003,0),1,5,5,n,n},{6,cf(-13.821200000000001,-0.3941,-12.735700000000001,-0,-3.1416,-0),0,n,n,n,n},{6,cf(13.6934,-0.36200000000000004,-12.7841,0,-0,0),0,n,n,n,n},{4,cf(-0.30210000000000004,2.15,-17.532500000000002,-0,-3.1416,0),3,5,3,n,n},{3,cf(0.8,-1.4003,-0.0001,-0,0,1.5708),1,4,13,5,n},{7,cf(-19.4087,2.0808,-17.464100000000002,-0,1.5708,-1.3090000000000002),0,n,n,n,n},{4,cf(0,0,0,-0,0,0),2,15,14,1,3},{5,cf(-0.0001,-0.4,0.6,-1.5708,-0,0),1,4,14,n,n},{7,cf(19.674200000000003,2.1262000000000003,-17.6192,-0,-1.5708,1.4361000000000002),0,n,n,n,n},{4,cf(0,0,0,-0,0,0),2,18,14,1,2},{6,cf(0,-2,8,0,-1.5708,0),1,6,11,7,n},{6,cf(0,-2,-8,-0,1.5708,-0),1,6,12,7,n},{2,cf(-0.1452,3.0292000000000003,3.3445,0,0,-0),0,n,n,n,n},{3,cf(-0.8,-2.1,0.0002,1.5708,1.5708,0),1,1,22,2,n},{3,cf(0.0002,-2.1,0.8,1.5708,3.1416,0),1,3,23,2,n},{5,cf(0,-0.4,0.6,-1.5708,-0,0),1,3,24,n,n},{4,cf(0,0,0,-0,0,0),2,5,24,4,4},{8,cf(-24.944300000000002,20.5868,1.9048,-0,-0,1.5708),0,n,n,n,n},{9,cf(-0.6,-0.4,0,-1.5708,-1.5708,0),1,1,27,n,n},{8,cf(-24.944300000000002,16.247700000000002,1.9806000000000001,-0,-0,1.5708),0,n,n,n,n},{9,cf(-0.6,-0.4,0,-1.5708,-1.5708,0),1,1,29,n,n},{8,cf(-24.944300000000002,12.0195,2.0307,-0,-0,1.5708),0,n,n,n,n},{9,cf(-0.6,-0.4,0,-1.5708,-1.5708,0),1,1,31,n,n},{2,cf(4.4036,3.0292000000000003,7.8609,0,0,-0),0,n,n,n,n},{4,cf(0,0,0,-0,0,0),2,23,33,4,1},{2,cf(-4.5262,3.0292000000000003,8.0223,0,0,-0),0,n,n,n,n},{4,cf(0,0,0,-0,0,0),2,35,23,1,5},{8,cf(-25.645400000000002,6.555700000000001,2.027,0,0,1.3090000000000002),0,n,n,n,n},{9,cf(-0.5795,-0.4,0.1553,-1.5708,-1.3090000000000002,0),1,1,37,n,n},{2,cf(-0.1282,5.4084,3.4557,0,0,-0),0,n,n,n,n},{3,cf(-0.8,-2.1,0.0002,1.5708,1.5708,0),1,1,39,2,n},{3,cf(0.0002,-2.1,0.8,1.5708,3.1416,0),1,3,40,2,n},{5,cf(0,-0.4,0.6,-1.5708,-0,0),1,3,41,n,n},{4,cf(0,0,0,-0,0,0),2,41,24,5,5},{2,cf(4.468100000000001,5.4084,8.3744,0,0,-0),0,n,n,n,n},{4,cf(0,0,0,-0,0,0),2,44,40,1,4},{2,cf(-4.5114,5.4084,8.3485,0,0,-0),0,n,n,n,n},{4,cf(0,0,0,-0,0,0),2,46,40,1,5},{10,cf(-25.244400000000002,20.2076,-10.2367,-0,0,1.5708),0,n,n,n,n},{10,cf(-25.244400000000002,15.198400000000001,-10.2356,-0,0,1.5708),0,n,n,n,n},{10,cf(-25.5594,9.4176,-10.225,0,-0,1.3090000000000002),0,n,n,n,n},{10,cf(-26.258000000000003,4.2413,-10.119200000000001,0,-0,1.3090000000000002),0,n,n,n,n},{9,cf(-0.5999,-0.4,0,-1.5708,-1.5708,0),1,1,51,n,n},{9,cf(-0.6,-0.4,0,-1.5708,-1.5708,0),1,1,50,n,n},{9,cf(-0.6,-0.4,0,-1.5708,-1.5708,0),1,1,49,n,n},{9,cf(-0.6,-0.4,0,-1.5708,-1.5708,0),1,1,48,n,n},{10,cf(25.116500000000002,20.2941,-10.279,0,0,-1.5708),0,n,n,n,n},{10,cf(25.116500000000002,15.246,-10.2687,-0,0,-1.5708),0,n,n,n,n},{10,cf(25.3823,9.8308,-10.259400000000001,0,-0,-1.3090000000000002),0,n,n,n,n},{10,cf(26.082800000000002,4.6412,-10.142100000000001,0,-0,-1.3090000000000002),0,n,n,n,n},{9,cf(-0.5796,-0.4,0.1553,-1.5708,-1.3090000000000002,0),1,1,59,n,n},{9,cf(-0.5795,-0.4,0.1553,-1.5708,-1.3090000000000002,0),1,1,58,n,n},{9,cf(-0.6,-0.4,0,-1.5708,-1.5708,0),1,1,57,n,n},{9,cf(-0.6,-0.4,0,-1.5708,-1.5708,0),1,1,56,n,n},{2,cf(-0.12050000000000001,7.7875000000000005,3.6044,0,-0,-0),0,n,n,n,n},{2,cf(4.546,7.7875000000000005,8.5779,-0,0,0),0,n,n,n,n},{2,cf(-4.446000000000001,7.7875000000000005,8.552900000000001,-0,0,0),0,n,n,n,n},{3,cf(-0.8,-2.1,0.0002,1.5708,1.5708,0),1,1,64,2,n},{3,cf(0.0002,-2.1,0.8,1.5708,3.1416,0),1,3,67,2,n},{5,cf(0,-0.4,0.6,-1.5708,-0,0),1,3,68,n,n},{4,cf(0,0,0,-0,0,0),2,41,68,4,4},{4,cf(0,0,0,-0,0,0),2,67,65,4,1},{4,cf(0,0,0,-0,0,0),2,66,67,1,5},{2,cf(-0.0883,10.1667,3.6052,0,0,-0),0,n,n,n,n},{2,cf(4.5742,10.1667,8.5655,0,0,-0),0,n,n,n,n},{2,cf(-4.5015,10.1667,8.6111,0,0,-0),0,n,n,n,n},{3,cf(-0.8,-2.1,0.0002,1.5708,1.5708,0),1,1,73,2,n},{3,cf(0.0002,-2.1,0.8,1.5708,3.1416,0),1,3,76,2,n},{5,cf(0,-0.4,0.6,-1.5708,-0,0),1,3,77,n,n},{4,cf(0,0,0,-0,0,0),2,68,77,5,5},{4,cf(0,0,0,-0,0,0),2,76,75,5,1},{4,cf(0,0,0,-0,0,0),2,74,76,1,4},{11,cf(-16.5611,17.6765,-16.1589,-0,-1.5708,1.5708),0,n,n,n,n},{9,cf(-0.4242,-0.4,0.4243,-1.5708,-0.7854,0),1,1,82,n,n},{2,cf(-0.1041,12.545900000000001,3.6021,0,0,-0),0,n,n,n,n},{2,cf(4.6127,12.545900000000001,8.495700000000001,0,0,-0),0,n,n,n,n},{2,cf(-4.6407,12.545900000000001,8.5577,0,0,-0),0,n,n,n,n},{3,cf(-0.8,-2.1,0.0002,1.5708,1.5708,0),1,1,84,2,n},{3,cf(0.0002,-2.1,0.8,1.5708,3.1416,0),1,3,87,2,n},{4,cf(0,0,0,-0,0,0),2,77,88,4,4},{4,cf(0,0,0,-0,0,0),2,87,85,4,1},{4,cf(0,0,0,-0,0,0),2,87,86,5,1},{2,cf(0.0044,14.9251,3.4713000000000003,-0,0,0),0,n,n,n,n},{2,cf(4.6530000000000005,14.9251,8.3367,-0,0,0),0,n,n,n,n},{2,cf(-4.7344,14.9251,8.401200000000001,-0,0,0),0,n,n,n,n},{3,cf(-0.8,-2.1,0.0002,1.5708,1.5708,0),1,1,92,2,n},{3,cf(0.0002,-2.1,0.8,1.5708,3.1416,0),1,3,95,2,n},{4,cf(0,0,0,-0,0,0),2,95,94,5,1},{4,cf(0,0,0,-0,0,0),2,93,95,1,4},{4,cf(0,0,0,-0,0,0),2,96,88,5,5},{12,cf(-11.3306,17.575,-17.358900000000002,-0,1.5708,-1.5708),0,n,n,n,n},{4,cf(0,0,0,-0,0,0),2,96,100,3,1},{5,cf(0,-0.4,0.6,-1.5708,-0,0),1,3,88,n,n},{2,cf(0.0983,17.3043,3.3739000000000003,0,0,-0),0,n,n,n,n},{2,cf(4.6759,17.3043,8.2965,0,0,-0),0,n,n,n,n},{2,cf(-4.5440000000000005,17.3043,8.3436,0,0,-0),0,n,n,n,n},{3,cf(-0.8,-2.1,0.0002,1.5708,1.5708,0),1,1,103,2,n},{4,cf(0,0,0,-0,0,0),2,104,106,1,4},{4,cf(0,0,0,-0,0,0),2,106,105,5,1},{3,cf(0.0002,-2.1,0.8,1.5708,3.1416,0),1,3,106,2,n},{4,cf(0,0,0,-0,0,0),2,96,109,4,4},{5,cf(-0.0001,-0.4,0.6,-1.5708,-0,0),1,3,109,n,n},{2,cf(0.0879,19.683400000000002,3.5267000000000004,0,0,-0),0,n,n,n,n},{3,cf(-0.8,-2.1,0.0002,1.5708,1.5708,0),1,1,112,2,n},{3,cf(0.0002,-2.1,0.8,1.5708,3.1416,0),1,3,113,2,n},{5,cf(0,-0.4,0.6,-1.5708,-0,0),1,3,114,n,n},{4,cf(0,0,0,-0,0,0),2,109,114,5,5},{13,cf(-18.3981,11.7719,-7.158600000000001,0,-3.1416,1.5708),0,n,n,n,n},{9,cf(-0.4243,-0.4,-0.4243,-1.5708,-2.3562000000000003,0),1,1,117,n,n},{13,cf(18.2702,13.2279,-7.3475,0,3.1416,-1.5708),0,n,n,n,n},{9,cf(-0.3,-0.4,0.5196000000000001,-1.5708,-0.5236000000000001,0),1,1,119,n,n},{14,cf(24.8165,19.756,0.8108000000000001,0,0,-1.5708),0,n,n,n,n},{9,cf(-0.6,-0.4,0,-1.5708,-1.5708,0),1,1,121,n,n},{14,cf(24.8165,13.511600000000001,0.7487,0,0,-1.5708),0,n,n,n,n},{9,cf(-0.6,-0.4,0,-1.5708,-1.5708,0),1,1,123,n,n},{14,cf(25.6157,5.8777,0.7806000000000001,-0,-0,-1.3090000000000002),0,n,n,n,n},{9,cf(-0.5795,-0.4,-0.1553,-1.5708,-1.8326,0),1,1,125,n,n},{14,cf(-21.6724,23.596400000000003,0.3942,0,-0,0),0,n,n,n,n},{9,cf(-0.6,-0.4,0,-1.5708,-1.5708,0),1,1,127,n,n},{14,cf(21.599700000000002,23.628500000000003,1.2071,-0,0,0),0,n,n,n,n},{9,cf(-0.3,-0.4,-0.5196000000000001,-1.5708,-2.6180000000000003,0),1,1,129,n,n},{15,cf(-11.7736,18.7345,-9.2126,1.5708,0,0),0,n,n,n,n},{4,cf(0,0,0,-0,0,0),2,131,113,1,5},{15,cf(12.201400000000001,18.7699,-9.260900000000001,1.5708,0,0),0,n,n,n,n},{4,cf(0,0,0,-0,0,0),2,133,113,1,4},{16,cf(-23.5607,31.0405,-10.2128,-0.7854,-1.5708,1.5709000000000002),0,n,n,n,n},{9,cf(-0.2999,-0.4,-0.5196000000000001,-1.5705,-0.0335,-2.8966000000000003),1,1,135,n,n},{16,cf(0.0034000000000000002,29.9191,-10.261000000000001,-1.5708,-0,0),0,n,n,n,n},{9,cf(-0.5796,-0.4,0.1552,-1.5708,-1.3090000000000002,0),1,1,137,n,n},{16,cf(24.8959,32.0745,-10.260900000000001,-1.0472000000000001,1.5708,-1.5708),0,n,n,n,n},{9,cf(-0.3,-0.4,0.5197,-1.5708,-0.5236000000000001,0),1,1,139,n,n},{17,cf(13.2209,17.7264,-16.3077,1.5708,3.1416,0),0,n,n,n,n},{4,cf(0,0,0,-0,0,0),2,141,114,1,4},{16,cf(13.5503,15.9177,-23.2073,0,1.5708,-1.5708),0,n,n,n,n},{9,cf(-0.5796,-0.4,0.1553,-1.5708,-1.3090000000000002,0),1,1,143,n,n},{13,cf(-2.7487,28.8011,-1.3137,0,0,1.5708),0,n,n,n,n},{13,cf(3.1265,28.5009,-1.5682,0,0,-1.5708),0,n,n,n,n},{9,cf(-0.4243,-0.4,0.4243,-1.5708,-0.7854,0),1,1,146,n,n},{9,cf(-0.1553,-0.4,-0.5796,-1.5708,-2.8798000000000004,0),1,1,145,n,n},}



--replace till this line

local remote = game:GetService("ReplicatedStorage").Shared.Remotes.PlaceStructure

local lplr = game:GetService('Players').LocalPlayer
local mouse = lplr:GetMouse()
mouse.Button1Down:Wait()
local base = mouse.Target

local placed = {}
local structures = workspace:WaitForChild('Structures')
local run = game:GetService('RunService')



local areaRadius = base.Size.Magnitude+5
local localRegion = Vector3.new()
for i, v in ipairs(tbl) do
	areaRadius = math.max(areaRadius, v[2].Position.Magnitude)
end

areaRadius+=5


local p = Instance.new('Part', workspace.CurrentCamera)
p.Anchored = true
p.CanCollide = false
p.Material = Enum.Material.ForceField
p.Shape = Enum.PartType.Ball
p.Size = Vector3.new(2,2,2)*areaRadius
p.Color = Color3.new(1,.2, .2)
p.CFrame = CFrame.new(base.CFrame.Position)
local ppos = base.CFrame.Position
task.delay(60*8, function()
	game.Debris:AddItem(p, 1)
end)


local a, b = pcall(function()
	for i, v in ipairs(tbl) do
        run.RenderStepped:Wait()
		local name = names[v[1]]
		print('loading', name)
		local placeMode = v[3]
		if placeMode == 0 then
			run.RenderStepped:Wait()
			remote:FireServer(
				name
				,{
					['BasePart'] = base;
					['CFrame'] = v[2]
				}
			)
		elseif placeMode == 1 then
			local needed = nil
			local s = os.clock()+2
			while needed == nil and os.clock()<s do
				for ii, vv in ipairs(placed[v[5]]:GetDescendants()) do
					if vv:IsA('BasePart') and vv.Name == attachments[ v[4] ] then
						needed = vv
						break
					end
				end
				run.RenderStepped:Wait()
			end
			remote:FireServer(
				name
				,{
					['BasePart'] = needed ;
					['CFrame'] = v[2]
				}
				,attachments[ v[6] or v[4] ]
				,needed
			)
		elseif placeMode == 2 then
			local needed1 = nil
			local s = os.clock()+2
			local cf1, cf2 = v[4], v[5]
			local attach1, attach2 = v[6], v[7]
			while needed1 == nil and os.clock()<s do
				for ii, vv in ipairs(placed[cf1]:GetDescendants()) do
					if vv:IsA('BasePart') and vv.Name == attachments[ attach1 ] then
						needed1 = vv
						break
					end
				end
				run.RenderStepped:Wait()
			end
			local needed2 = nil
			local s = os.clock()+2
			while needed2 == nil and os.clock()<s do
				for ii, vv in ipairs(placed[cf2]:GetDescendants()) do
					if vv:IsA('BasePart') and vv.Name == attachments[ attach2 ] then
						needed2 = vv
						break
					end
				end
				run.RenderStepped:Wait()
			end
			remote:FireServer(
				name
				,{
					[1]={ ['CFrame'] = needed1 };
					[2]= { ['CFrame'] = needed2 };
				}
			)
		elseif placeMode == 3 then
			local needed1 = nil
			local s = os.clock()+2
			local cf, basepart, attahment = v[2] , v[4], v[5]
			local attach1
			while needed1 == nil and os.clock()<s do
				for ii, vv in ipairs(placed[basepart]:GetDescendants()) do
					if vv:IsA('BasePart') and vv.Name == attachments[ attahment ] then
						needed1 = vv
						break
					end
				end
				run.RenderStepped:Wait()
			end
			remote:FireServer(
				name
				,{
					[1]={ ['CFrame'] = needed1 };
					[2]= { ['CFrame'] = cf, BasePart = base };
				}
			)
		end
		--if (model:GetPivot().Position-targetPos).Magnitude<= ( placeMode == 0 and 40 or 40 ) or (model:GetPivot().Position-base.Position).Magnitude <= areaRadius then
		local targetPos = (base.CFrame*v[2]).Position
		local found, s = false, os.clock()+60*5

		local con = structures.ChildAdded:Connect(function(model)
			if model.Name == name and not model:FindFirstChild('IsBlueprint') and not model:WaitForChild('IsBlueprint', 1) then
				
				local ss = os.clock()+2
				while ss>os.clock() and model.PrimaryPart == nil do run.RenderStepped:Wait() end
				if (model:GetPivot().Position-targetPos).Magnitude<= ( placeMode == 0 and 40 or 40 ) or (model:GetPivot().Position-ppos).Magnitude <= areaRadius then
					found = model
				end
			end
		end)
		repeat run.RenderStepped:Wait() until found~=false or os.clock()>s
		con:Disconnect()
		if found then
			placed[i] = found
		end
		
	end
end)

p:Destroy()

print(a, b)



