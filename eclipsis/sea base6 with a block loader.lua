names = {'Wall','Slab Block','Submersible','Four-Way','T-Junction','Pipe','Distributor','Spawn Point','Distributor Cap','Fabricator','Arc Turret','Turret','Shield Generator','Cap','Automechanic','Point Defense','Upgrade Station','Arsenal','Reservoir','Elbow',};
attachments = {'WallSnap1','WallSnap2','FemaleFlange','FemaleFlange3','FemaleFlange1','FemaleFlange2','FemaleFlange4',};
local n
local cf = function(xp, yp, zp, xr, yr, zr)
	return cfn(xp, yp, zp)*cfa(xr,yr,zr)
end
cfn, cfa = CFrame.new, CFrame.fromEulerAnglesYXZ
local tbl = {
{1,cf(-0.1,4.105,5.105,1.57,3.14,0),0,n,n,n,n},{1,cf(-8,-2,0,-0,-3.14,-0),1,1,1,2,n},{1,cf(8,-2,0,-0,0,0),1,2,1,2,n},{2,cf(-0.01,9.25,4.985,-0,-3.14,-0),0,n,n,n,n},{3,cf(-0.215,10.4,3.695,-0,0,0),0,n,n,n,n},{4,cf(-0.8,-2.1,0,1.57,1.57,0),1,3,5,4,n},{5,cf(0,-2.1,0.8,1.57,3.14,0),1,5,6,4,n},{1,cf(-16.115,7.63,-17.485,0,-0,0),0,n,n,n,n},{1,cf(15.89,7.63,-17.475,-0,-0,0),0,n,n,n,n},{6,cf(-0.315,11.365,-20.11,-0,-3.14,-0),3,7,5,n,n},{5,cf(-0,-2.1,-0.8,1.57,-0,0),1,6,10,4,n},{6,cf(-0.2,27.77,-22.515,-1.57,-0,0),3,11,6,n,n},{5,cf(0.8,-1.4,-0,0,-3.14,-1.57),1,6,12,6,n},{7,cf(22.015,27.39,-20.9,-0,-1.57,1.57),0,n,n,n,n},{6,cf(0,0,0,-0,0,0),2,14,13,3,4},{7,cf(-22.48,27.165,-20.91,0,1.57,-1.57),0,n,n,n,n},{6,cf(0,0,0,-0,0,0),2,16,13,3,5},{3,cf(-4.36,10.4,5.16,-0,0,0),0,n,n,n,n},{6,cf(0,0,0,-0,0,0),2,18,6,3,7},{8,cf(-15.075,20.925,-20.91,0,-1.57,1.57),0,n,n,n,n},{9,cf(-0.52,-0.4,0.3,-1.57,-1.045,0),1,3,20,n,n},{1,cf(-0,-2,-8,0,1.57,0),1,2,8,2,n},{1,cf(-8,-2,0,0,-3.14,0),1,1,22,2,n},{10,cf(-27.235,28.57,-14.135,-0,-0,1.57),0,n,n,n,n},{9,cf(-0.58,-0.4,0.155,-1.57,-1.31,0),1,3,24,n,n},{11,cf(-20.69,14.905,-11.37,-0,3.14,1.57),0,n,n,n,n},{9,cf(-0.52,-0.4,-0.3,-1.57,-2.095,0),1,3,26,n,n},{12,cf(-6.05,8.485,-22.295,1.57,3.14,0),0,n,n,n,n},{9,cf(-0.58,-0.4,-0.155,-1.57,-1.835,0),1,3,28,n,n},{3,cf(3.91,10.4,4.955,-0,-0,0),0,n,n,n,n},{6,cf(0,0,0,-0,0,0),2,30,6,3,6},{10,cf(-27.235,24.29,-14.12,-0,-0,1.57),0,n,n,n,n},{9,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,3,32,n,n},{13,cf(-27.535,28.46,11.925,0,-0,1.57),0,n,n,n,n},{9,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,3,34,n,n},{1,cf(-0,-2,-8,0,1.57,-0),1,1,9,2,n},{1,cf(-8,-2,0,0,-3.14,0),1,1,36,2,n},{13,cf(27.315,28.005,11.97,-0,-0,-1.57),0,n,n,n,n},{9,cf(-0.58,-0.4,-0.155,-1.57,-1.835,0),1,3,38,n,n},{3,cf(-0.205,12.78,3.675,0,0,0),0,n,n,n,n},{4,cf(-0.8,-2.1,0,1.57,1.57,0),1,3,40,4,n},{4,cf(0,-2.1,0.8,1.57,3.14,0),1,5,41,4,n},{14,cf(0,-0.4,0.6,-1.57,-0,0),1,5,42,n,n},{6,cf(0,0,0,-0,0,0),2,7,42,6,6},{3,cf(-4.34,12.78,5.075,-0,-0,0),0,n,n,n,n},{6,cf(0,0,0,-0,0,0),2,45,41,3,7},{10,cf(27.015,28.585,-14.125,0,-0,-1.57),0,n,n,n,n},{9,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,3,47,n,n},{3,cf(3.98,12.78,4.83,0,-0,0),0,n,n,n,n},{6,cf(0,0,0,-0,0,0),2,49,41,3,6},{10,cf(27.015,24.345,-14.155,0,-0,-1.57),0,n,n,n,n},{9,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,3,51,n,n},{3,cf(-0.25,15.16,3.565,0,0,0),0,n,n,n,n},{4,cf(-0.8,-2.1,0,1.57,1.57,0),1,3,53,4,n},{4,cf(0,-2.1,0.8,1.57,3.14,0),1,5,54,4,n},{14,cf(0,-0.4,0.6,-1.57,-0,0),1,5,55,n,n},{6,cf(0,0,0,-0,0,0),2,42,55,7,7},{3,cf(-4.375,15.16,5.065,0,0,0),0,n,n,n,n},{6,cf(0,0,0,-0,0,0),2,58,54,3,7},{10,cf(-27.235,20.05,-14.185,-0,-0,1.57),0,n,n,n,n},{9,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,3,60,n,n},{3,cf(3.89,15.16,4.735,0,0,0),0,n,n,n,n},{6,cf(0,0,0,-0,0,0),2,54,62,6,3},{15,cf(15.115,7.23,-8.76,-0,3.14,-0),0,n,n,n,n},{9,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,3,64,n,n},{13,cf(27.315,22.945,11.95,-0,-0,-1.57),0,n,n,n,n},{9,cf(-0.58,-0.4,0.155,-1.57,-1.31,0),1,3,66,n,n},{13,cf(-27.535,23.47,11.9,-0,-0,1.57),0,n,n,n,n},{9,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,3,68,n,n},{3,cf(-0.265,17.54,3.62,0,-0,0),0,n,n,n,n},{4,cf(-0.8,-2.1,0,1.57,1.57,0),1,3,70,4,n},{4,cf(0,-2.1,0.8,1.57,3.14,0),1,5,71,4,n},{14,cf(0,-0.4,0.6,-1.57,-0,0),1,5,72,n,n},{6,cf(0,0,0,-0,0,0),2,55,72,6,6},{3,cf(3.905,17.54,4.76,0,-0,0),0,n,n,n,n},{6,cf(0,0,0,-0,0,0),2,75,71,3,6},{3,cf(-4.405,17.54,5.085,0,-0,0),0,n,n,n,n},{6,cf(0,0,0,-0,0,0),2,77,71,3,7},{10,cf(-27.235,15.77,-14.2,-0,-0,1.57),0,n,n,n,n},{9,cf(-0.6,-0.4,-0,-1.57,-1.57,0),1,3,79,n,n},{10,cf(27.015,20.085,-14.15,-0,-0,-1.57),0,n,n,n,n},{9,cf(-0.6,-0.4,-0,-1.57,-1.57,0),1,3,81,n,n},{16,cf(15.92,7.28,-22.77,1.57,3.14,0),0,n,n,n,n},{9,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,3,83,n,n},{10,cf(27.015,15.85,-14.17,0,-0,-1.57),0,n,n,n,n},{9,cf(-0.6,-0.4,-0,-1.57,-1.57,0),1,3,85,n,n},{3,cf(-0.255,19.915,3.57,0,-0,0),0,n,n,n,n},{4,cf(-0.8,-2.1,0,1.57,1.57,0),1,3,87,4,n},{4,cf(0,-2.1,0.8,1.57,3.14,0),1,5,88,4,n},{14,cf(0,-0.4,0.6,-1.57,-0,0),1,5,89,n,n},{6,cf(0,0,0,-0,0,0),2,72,89,7,7},{3,cf(3.985,19.915,4.765,-0,0,0),0,n,n,n,n},{6,cf(0,0,0,-0,0,0),2,92,88,3,6},{3,cf(-4.395,19.915,5.055,0,0,0),0,n,n,n,n},{6,cf(0,0,0,-0,0,0),2,94,88,3,7},{11,cf(20.47,19.36,-11.56,-0,3.14,-1.57),0,n,n,n,n},{9,cf(-0.52,-0.4,0.3,-1.57,-1.045,0),1,3,96,n,n},{3,cf(-0.295,22.295,3.52,0,-0,0),0,n,n,n,n},{4,cf(-0.8,-2.1,0,1.57,1.57,0),1,3,98,4,n},{4,cf(0,-2.1,0.8,1.57,3.14,0),1,5,99,4,n},{6,cf(0,0,0,-0,0,0),2,89,100,6,6},{3,cf(3.95,22.295,5.095,0,-0,0),0,n,n,n,n},{6,cf(0,0,0,-0,0,0),2,102,99,3,6},{3,cf(-4.32,22.295,5.42,0,-0,0),0,n,n,n,n},{6,cf(0,0,0,-0,0,0),2,104,99,3,7},{13,cf(27.68,17.065,12.04,0,-0,-1.31),0,n,n,n,n},{9,cf(-0.58,-0.4,0.155,-1.57,-1.31,0),1,3,106,n,n},{13,cf(28.455,11.33,12.025,-0,-0,-1.31),0,n,n,n,n},{9,cf(-0.58,-0.4,0.155,-1.57,-1.31,0),1,3,108,n,n},{13,cf(-27.815,17.725,11.955,0,-0,1.31),0,n,n,n,n},{9,cf(-0.58,-0.4,-0.155,-1.57,-1.835,0),1,3,110,n,n},{13,cf(-28.61,11.81,11.89,0,-0,1.31),0,n,n,n,n},{9,cf(-0.58,-0.4,-0.155,-1.57,-1.835,0),1,3,112,n,n},{17,cf(-11.25,20.86,-22.11,-0,1.57,-1.57),0,n,n,n,n},{6,cf(0,0,0,-0,0,0),2,114,100,3,5},{16,cf(-15.815,7.175,-22.78,1.57,3.14,0),0,n,n,n,n},{9,cf(-0.52,-0.4,-0.3,-1.57,-2.095,0),1,3,116,n,n},{3,cf(-0.255,24.675,3.53,-0,0,0),0,n,n,n,n},{3,cf(3.87,24.675,4.735,0,0,0),0,n,n,n,n},{4,cf(-0.8,-2.1,0,1.57,1.57,0),1,3,118,4,n},{4,cf(0,-2.1,0.8,1.57,3.14,0),1,5,120,4,n},{6,cf(0,0,0,-0,0,0),2,120,119,6,3},{6,cf(0,0,0,-0,0,0),2,100,121,7,7},{3,cf(-4.345,24.675,5.08,-0,-0,0),0,n,n,n,n},{6,cf(0,0,0,-0,0,0),2,124,120,3,7},{18,cf(14.43,20.285,-21,1.57,3.14,0),0,n,n,n,n},{6,cf(0,0,0,-0,0,0),2,126,121,3,5},{3,cf(-0.295,27.055,3.435,-0,0,0),0,n,n,n,n},{3,cf(3.78,27.055,4.625,0,0,0),0,n,n,n,n},{3,cf(-4.425,27.055,4.65,0,0,0),0,n,n,n,n},{4,cf(-0.8,-2.1,0,1.57,1.57,0),1,3,128,4,n},{6,cf(0,0,0,-0,0,0),2,131,130,7,3},{6,cf(0,0,0,-0,0,0),2,131,129,6,3},{4,cf(0,-2.1,0.8,1.57,3.14,0),1,5,131,4,n},{6,cf(0,0,0,-0,0,0),2,121,134,6,6},{14,cf(-0.155,-0.4,0.58,-1.57,-0.26,0),1,5,134,n,n},{11,cf(20.47,27.315,-11.66,0,3.14,-1.57),0,n,n,n,n},{9,cf(-0.58,-0.4,0.155,-1.57,-1.31,0),1,3,137,n,n},{11,cf(-20.69,26.19,-11.37,0,3.14,1.57),0,n,n,n,n},{9,cf(-0.58,-0.4,-0.155,-1.57,-1.835,0),1,3,139,n,n},{3,cf(-0.31,29.435,3.38,0,0,0),0,n,n,n,n},{4,cf(-0.8,-2.1,0,1.57,1.57,0),1,3,141,4,n},{4,cf(0,-2.1,0.8,1.57,3.14,0),1,5,142,4,n},{14,cf(0,-0.4,0.6,-1.57,-0,0),1,5,143,n,n},{14,cf(0.155,-0.4,0.58,-1.57,0.26,0),1,6,143,n,n},{6,cf(0,0,0,-0,0,0),2,134,143,7,7},{19,cf(-13.04,23.225,-13.96,1.57,0,0),0,n,n,n,n},{20,cf(0.35,-1,0.92,0,1.31,-1.57),1,3,147,6,n},{6,cf(0,0,0,-0,0,0),2,148,142,5,7},{19,cf(13.09,23.265,-13.955,1.57,0,0),0,n,n,n,n},{20,cf(0.97,-1,0.16,0,2.355,-1.57),1,3,150,6,n},{6,cf(0,0,0,-0,0,0),2,142,151,6,5},{13,cf(-8.69,7.53,-9.575,0,-1.57,-0),0,n,n,n,n},{9,cf(-0.58,-0.4,-0.155,-1.57,-1.835,0),1,3,153,n,n},{13,cf(8.465,7.53,-9.27,0,-1.57,0),0,n,n,n,n},{9,cf(-0.58,-0.4,-0.155,-1.57,-1.835,0),1,3,155,n,n},{15,cf(15.78,31.62,-16.885,0,0,0),0,n,n,n,n},{15,cf(10.075,31.62,-16.9,0,0,0),0,n,n,n,n},{15,cf(-16.25,31.62,-17.09,0,0,0),0,n,n,n,n},{15,cf(-10.49,31.62,-17.235,0,0,0),0,n,n,n,n},{9,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,3,159,n,n},{9,cf(-0.6,-0.4,-0,-1.57,-1.57,0),1,3,160,n,n},{9,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,3,158,n,n},{9,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,3,157,n,n},{16,cf(-0.22,36.875,-14.96,-1.57,-0,0),0,n,n,n,n},{9,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,3,165,n,n},{16,cf(-24.36,38.225,-10.965,0,3.14,0),0,n,n,n,n},{16,cf(24.27,38.265,-10.045,0,-3.14,-0),0,n,n,n,n},{9,cf(-0.6,-0.4,-0,-1.57,-1.57,0),1,3,167,n,n},{9,cf(-0.58,-0.4,-0.155,-1.57,-1.835,0),1,3,168,n,n},{15,cf(-15.405,34.44,-2.265,-1.31,0,-0),0,n,n,n,n},{15,cf(-9.035,34.255,-2.31,-1.31,0,-0),0,n,n,n,n},{15,cf(8.97,34.22,-2.315,-1.31,0,-0),0,n,n,n,n},{15,cf(15,34.07,-2.35,-1.31,0,-0),0,n,n,n,n},{9,cf(-0.58,-0.4,-0.155,-1.57,-1.835,0),1,3,174,n,n},{9,cf(-0.58,-0.4,-0.155,-1.57,-1.835,0),1,3,173,n,n},{9,cf(-0.58,-0.4,-0.155,-1.57,-1.835,0),1,3,172,n,n},{9,cf(-0.58,-0.4,-0.155,-1.57,-1.835,0),1,3,171,n,n},{15,cf(-24.86,34.64,-14.56,1.57,3.14,0),0,n,n,n,n},{9,cf(-0.58,-0.4,-0.155,-1.57,-1.835,0),1,3,179,n,n},{15,cf(24.66,34.87,-14.555,1.57,3.14,0),0,n,n,n,n},{9,cf(-0.6,-0.4,-0,-1.57,-1.57,0),1,3,181,n,n},{13,cf(28.475,29.2,-0.86,-0,-0,-1.57),0,n,n,n,n},{13,cf(28.475,24.19,-0.875,-0,-0,-1.57),0,n,n,n,n},{13,cf(28.475,19.23,-0.86,-0,-0,-1.57),0,n,n,n,n},{13,cf(28.475,14.225,-0.85,-0,-0,-1.57),0,n,n,n,n},{9,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,3,183,n,n},{9,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,3,184,n,n},{9,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,3,185,n,n},{9,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,3,186,n,n},{13,cf(-28.9,12.23,-0.435,-0,-0,1.57),0,n,n,n,n},{13,cf(-28.9,17.88,-0.43,-0,-0,1.57),0,n,n,n,n},{13,cf(-28.9,23.5,-0.355,-0,-0,1.57),0,n,n,n,n},{13,cf(-28.9,29.35,-0.35,-0,-0,1.57),0,n,n,n,n},{9,cf(-0.58,-0.4,-0.155,-1.57,-1.835,0),1,3,191,n,n},{9,cf(-0.58,-0.4,-0.155,-1.57,-1.835,0),1,3,192,n,n},{9,cf(-0.58,-0.4,-0.155,-1.57,-1.835,0),1,3,193,n,n},{9,cf(-0.58,-0.4,-0.155,-1.57,-1.835,0),1,3,194,n,n},{12,cf(5.105,8.35,-22.295,1.57,-3.14,0),0,n,n,n,n},{9,cf(-0.6,-0.4,-0,-1.57,-1.57,0),1,3,199,n,n},{13,cf(0.05,38.165,-7.33,-0,0,0),0,n,n,n,n},{9,cf(-0.58,-0.4,-0.155,-1.57,-1.835,0),1,3,201,n,n},{13,cf(-13.065,38.675,-0.295,-0,-0,-0),0,n,n,n,n},{13,cf(15.38,38.66,0.585,-0,-0,-0),0,n,n,n,n},{9,cf(-0.52,-0.4,-0.3,-1.57,-2.095,0),1,3,203,n,n},{9,cf(-0.52,-0.4,-0.3,-1.57,-2.095,0),1,3,204,n,n},{13,cf(0.11,38.66,2.32,0,-3.14,0),0,n,n,n,n},{9,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,3,207,n,n},{16,cf(14.55,18.75,-27.9,1.57,3.14,0),0,n,n,n,n},{9,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,3,209,n,n},{12,cf(-27.635,24.75,-8.185,-1.57,1.57,0),0,n,n,n,n},{9,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,3,211,n,n},{12,cf(27.415,21.755,-7.765,1.57,1.57,0),0,n,n,n,n},{9,cf(-0.58,-0.4,0.155,-1.57,-1.31,0),1,3,213,n,n},}

--replace till this line

local import = function(toimport)
	return typeof(toimport) == "number" and game:GetObjects("rbxassetid://" .. toimport)[1] or syn and loadstring(syn.request({Url = toimport}).Body)() or loadstring(game:HttpGetAsync(toimport))()
end



local billboard = import(9184931264)
local remote = game:GetService("ReplicatedStorage").Shared.Remotes.PlaceStructure
local buttonRemote = game:GetService("ReplicatedStorage").Shared.Remotes.ContextButton
local lplr = game:GetService('Players').LocalPlayer
local mouse = lplr:GetMouse()
mouse.Button1Down:Wait()
local base = mouse.Target

local placed = {}
local structures = workspace:WaitForChild('Structures')
local run = game:GetService('RunService')
local buildstart = os.clock()



local partsToFind = {
	UpgradeStation = 'Part';
	Arsenal = 'TeamColor';
	['Point Defense'] = 'TeamColor'
}



local _mmreg = {}
local newline = [[
]]
local mmreg = setmetatable({},{
	__newindex = function(_, i, v)
		_mmreg[i..'min'] = _mmreg[i..'min'] ~= nil and math.min(v-15, _mmreg[i..'min']) or  math.huge
		_mmreg[i..'max'] = _mmreg[i..'max'] ~= nil and math.max(v+15, _mmreg[i..'max']) or -math.huge
	end;
	__index = function(_, i)
		return _mmreg[i]
	end;
	__tostring = function()
		local r = ''
		for i, v in pairs(_mmreg) do
			r..=i..' = '..v..newline
		end
		return r
	end
})

for _, v in ipairs(tbl) do
	local pos = v[2].Position
	mmreg.X = pos.X
	mmreg.Y = pos.Y
	mmreg.Z = pos.Z
end

local mincf = CFrame.new(_mmreg.Xmin,_mmreg.Ymin,_mmreg.Zmin)
local maxcf = CFrame.new(_mmreg.Xmax,_mmreg.Ymax,_mmreg.Zmax)

local p = Instance.new('Part', workspace.CurrentCamera)
p.Anchored = true
p.CanCollide = false
p.Material = Enum.Material.ForceField
p.Size = Vector3.new(maxcf.X-mincf.X,maxcf.Y-mincf.Y,maxcf.Z-mincf.Z)
p.Color = Color3.new(1,.2, .2)
p.CFrame =base.CFrame* CFrame.new( (maxcf.p+mincf.p)/2 )

billboard.Parent = game.CoreGui
billboard.Adornee = p

local totalParts = #tbl
local hsize = p.Size/2
local partCF = p.CFrame

task.delay(60*10, function()
	game.Debris:AddItem(p, 1)
end)

_rancalls = 0
local ranpos = function()
	_rancalls+=1
	if _rancalls>=10000 then
		_rancalls = math.random(-10000, 1000)
	end

	math.randomseed(_rancalls)
	return Vector3.new(
		math.random(-7000, 7000)
		,math.random(-7000, 7000)
		,math.random(-7000, 7000)
	)/40000
end


function isInsideBrick(position)
	local v3 = partCF:PointToObjectSpace(position)
	return (math.abs(v3.X) <= hsize.X)
		and (math.abs(v3.Y) <= hsize.Y)
		and (math.abs(v3.Z) <= hsize.Z)
end






local shields = {}

local enableShield = function(found)
	local foundClone = found
	if foundClone.Name == 'Shield Generator' then
		coroutine.wrap(function()
			local enabled = shields[foundClone]
			if enabled == nil then
				shields[foundClone] = true
			else
				return
			end
			
			if foundClone:WaitForChild('EnableButton', 5) and foundClone.EnableButton:WaitForChild('ContextButton', 5) then
				task.wait(5)
				buttonRemote:FireServer(foundClone.EnableButton.ContextButton)
			end
		end)()
	end
end

local placeStructure = function(i, v, tries)
	local name = names[v[1]]

	billboard.ProgressTotal.Bar.Size = UDim2.fromScale(i/totalParts, 1)
	billboard.ProgressTotal.TextLabel.Text = tostring( math.round(i/totalParts*100) )..'%     '..i..'/'..totalParts..'     '..math.round(os.clock()-buildstart)..'s'
	--billboard.Structure.TextLabel.Text = name
	billboard.StudsOffset = Vector3.new(0, hsize.Y*1.1+5, 0)

	local placeMode = v[3]
	if placeMode == 0 then
		remote:FireServer(
			name
			,{
				['BasePart'] = base;
				['CFrame'] = v[2] + (tries <5 and Vector3.new() or ranpos()) * (tries < 25 and .1 or i/200 )
			}
		)
	elseif placeMode == 1 then
		local needed = nil
		local s = os.clock()+2
		while needed == nil and os.clock()<s do
			for ii, vv in ipairs(placed[v[5]]:GetDescendants()) do
				if vv:IsA('BasePart') and vv.Name == attachments[ v[4] ] then
					needed = vv
					break
				end
			end
			run.RenderStepped:Wait()
		end
		remote:FireServer(
			name
			,{
				['BasePart'] = needed ;
				['CFrame'] = v[2]
			}
			,attachments[ v[6] or v[4] ]
			,needed
		)
	elseif placeMode == 2 then
		local needed1 = nil
		local s = os.clock()+2
		local cf1, cf2 = v[4], v[5]
		local attach1, attach2 = v[6], v[7]
		while needed1 == nil and os.clock()<s do
			for ii, vv in ipairs(placed[cf1]:GetDescendants()) do
				if vv:IsA('BasePart') and vv.Name == attachments[ attach1 ] then
					needed1 = vv
					break
				end
			end
			run.RenderStepped:Wait()
		end
		local needed2 = nil
		local s = os.clock()+2
		while needed2 == nil and os.clock()<s do
			for ii, vv in ipairs(placed[cf2]:GetDescendants()) do
				if vv:IsA('BasePart') and vv.Name == attachments[ attach2 ] then
					needed2 = vv
					break
				end
			end
			run.RenderStepped:Wait()
		end
		remote:FireServer(
			name
			,{
				[1]={ ['CFrame'] = needed1 };
				[2]= { ['CFrame'] = needed2 };
			}
		)
	elseif placeMode == 3 then
		local needed1 = nil
		local s = os.clock()+2
		local cf, basepart, attahment = v[2] , v[4], v[5]
		local attach1
		while needed1 == nil and os.clock()<s do
			for ii, vv in ipairs(placed[basepart]:GetDescendants()) do
				if vv:IsA('BasePart') and vv.Name == attachments[ attahment ] then
					needed1 = vv
					break
				end
			end
			run.RenderStepped:Wait()
		end
		remote:FireServer(
			name
			,{
				[1]={ ['CFrame'] = needed1 };
				[2]= { ['CFrame'] = cf, BasePart = base };
			}
		)
	end
end


local a, b = pcall(function()

	local stopped = false

	billboard.StopButton.ZIndex = 1000
	billboard.StopButton.MouseButton1Click:Connect(function()
		stopped = true
	end)

	for i, v in ipairs(tbl) do
		if stopped == true then break end

		local name = names[v[1]]
		local send = os.clock() + 60*4
		local partstart = os.clock()
		local tries = 0

		local found = false

		local con = structures.ChildAdded:Connect(function(nig)
			local model = nig
			if model.Name == name and model:WaitForChild('Builder', 5) and model.Builder.Value ~= nil and model.Builder.Value.UserId == lplr.UserId then
				local ss = os.clock()+5
				while ss>os.clock() and model.PrimaryPart == nil do run.RenderStepped:Wait() end
				for aboba = 0, 1, 0.2 do

					if not workspace:IsAncestorOf(model) then return end
					
					local modelPos = partsToFind[name] ~= nil and model:WaitForChild(partsToFind[name], 5).Position or (model.PrimaryPart and model.PrimaryPart.CFrame or (model:FindFirstChildOfClass('Part') or model:FindFirstChildOfClass('MeshPart')).CFrame ).Position

					if isInsideBrick(modelPos) then
						found = model
						break
					else
						if aboba<0.6 then
							run.RenderStepped:Wait()
						else
							task.wait( math.random(20, 40)/100 )
						end
					end
				end
				if found == false then
					warn(model, 'didnt match')
				end
				
			end
		end)

		coroutine.wrap(function()
			while found == false and os.clock()<send do
				tries += 1
				billboard.Structure.TextLabel.Text = name..' '..math.round( os.clock()-partstart )..'s'
				placeStructure(i, v, tries)
				task.wait(.1)
			end
		end)()

		repeat run.RenderStepped:Wait() until found~=false or os.clock()>send
		con:Disconnect()
		if found then
			placed[i] = found
			enableShield(found)
		end
		
		if os.clock()>send then
			warn(i, v[i], 'failed')
			break
		end

	end
end)



p:Destroy()
billboard:Destroy()

print(a, b)



