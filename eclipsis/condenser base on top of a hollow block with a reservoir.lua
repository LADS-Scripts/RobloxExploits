names = {'Condenser','Four-Way','Distributor','Pipe','T-Junction','Cap','Fabricator','Distributor Cap','Reservoir','Spawn Point','Elbow','Upgrade Station','Shield Generator',};
	attachments = {'FemaleFlange','FemaleFlange3','FemaleFlange1','FemaleFlange2','FemaleFlange4',};
	local cf = function(xp, yp, zp, xr, yr, zr)
	return cfn(xp, yp, zp)*cfa(xr,yr,zr)
end
cfn, cfa = CFrame.new, CFrame.fromEulerAnglesYXZ
local tbl = {{1,cf(0.01,0.85,1.44,0,-0,-0),0,nil,nil,nil,nil},{1,cf(3.89,3.7800000000000002,1.59,0,-0,-1.57),0,nil,nil,nil,nil},{1,cf(-3.87,3.58,1.52,0,-0,1.57),0,nil,nil,nil,nil},{2,cf(-0.8,-2.1,0,1.57,1.57,0),1,1,1,2,nil},{2,cf(-0.5700000000000001,-2.1,0.5700000000000001,1.57,2.36,0),1,3,4,2,nil},{3,cf(-4.36,-3.22,3,0.26,1.57,-1.57),0,nil,nil,nil,nil},{4,cf(0,0,0,-0,0,0),2,6,5,1,4},{4,cf(0,0,0,-0,0,0),2,4,2,4,1},{4,cf(0,0,0,-0,0,0),2,4,3,5,1},{1,cf(0.05,7.58,1.6600000000000001,0,-0,0),0,nil,nil,nil,nil},{2,cf(-0.8,-2.1,0,1.57,1.57,0),1,1,10,2,nil},{5,cf(-0,-2.1,-0.8,1.57,0,0),1,3,11,2,nil},{1,cf(-3.83,10.3,3.1,0,-0,1.57),0,nil,nil,nil,nil},{1,cf(3.93,10.33,1.61,0,-0,-1.57),0,nil,nil,nil,nil},{4,cf(0,0,0,-0,0,0),2,11,13,5,1},{4,cf(0,0,0,-0,0,0),2,11,14,4,1},{4,cf(0,0,0,-0,0,0),2,12,5,4,5},{6,cf(0.3,-0.4,0.52,-1.57,1.25,-1.98),1,3,5,nil,nil},{7,cf(10.22,3.72,1.86,0,-0,-1.57),0,nil,nil,nil,nil},{8,cf(-0.58,-0.4,0.16,-1.57,-1.31,0),1,1,19,nil,nil},{1,cf(0.06,14.31,1.59,0,-0,0),0,nil,nil,nil,nil},{2,cf(-0.8,-2.1,0,1.57,1.57,0),1,1,21,2,nil},{5,cf(0,-2.1,0.8,1.57,-3.14,0),1,3,22,2,nil},{4,cf(0,0,0,-0,0,0),2,23,12,3,3},{1,cf(-3.8200000000000003,17.32,1.49,0,-0,1.57),0,nil,nil,nil,nil},{1,cf(3.95,16.97,1.61,-0,-0,-1.57),0,nil,nil,nil,nil},{4,cf(0,0,0,-0,0,0),2,26,22,1,4},{4,cf(0,0,0,-0,0,0),2,22,25,5,1},{1,cf(0.13,21.04,1.57,0,-0,0),0,nil,nil,nil,nil},{1,cf(-3.75,23.69,1.53,0,-0,1.57),0,nil,nil,nil,nil},{1,cf(4.01,23.54,1.58,0,-0,-1.57),0,nil,nil,nil,nil},{2,cf(-0.8,-2.1,0,1.57,1.57,0),1,1,29,2,nil},{4,cf(0,0,0,-0,0,0),2,32,30,5,1},{4,cf(0,0,0,-0,0,0),2,32,31,4,1},{5,cf(0,-2.1,0.8,1.57,-3.14,0),1,3,32,2,nil},{4,cf(0,0,0,-0,0,0),2,35,23,4,4},{7,cf(-10.200000000000001,4.21,1.51,0,-0,1.57),0,nil,nil,nil,nil},{8,cf(-0.58,-0.4,-0.16,-1.57,-1.83,0),1,1,37,nil,nil},{1,cf(0.17,27.77,1.56,0,-0,0),0,nil,nil,nil,nil},{2,cf(-0.8,-2.1,0,1.57,1.57,0),1,1,39,2,nil},{5,cf(-0,-2.1,-0.8,1.57,0,0),1,3,40,2,nil},{1,cf(4.05,30.54,1.57,0,-0,-1.57),0,nil,nil,nil,nil},{1,cf(-3.72,30.37,1.53,-0,-0,1.57),0,nil,nil,nil,nil},{4,cf(0,0,0,-0,0,0),2,40,42,4,1},{4,cf(0,0,0,-0,0,0),2,40,43,5,1},{4,cf(0,0,0,-0,0,0),2,41,35,3,3},{1,cf(0.25,34.5,1.56,0,-0,0),0,nil,nil,nil,nil},{2,cf(-0.8,-2.1,0,1.57,1.57,0),1,1,47,2,nil},{5,cf(-0,-2.1,-0.8,1.57,0,0),1,3,48,2,nil},{1,cf(-3.63,37.050000000000004,1.59,0,-0,1.57),0,nil,nil,nil,nil},{1,cf(4.14,37.21,1.77,0,-0,-1.57),0,nil,nil,nil,nil},{4,cf(0,0,0,-0,0,0),2,50,48,1,5},{4,cf(0,0,0,-0,0,0),2,48,51,4,1},{2,cf(-0.8,-2.1,0,1.57,1.57,0),1,4,49,2,nil},{4,cf(0,0,0,-0,0,0),2,54,41,5,4},{6,cf(-0.3,-0.4,-0.52,-1.57,-2.62,0),1,3,49,nil,nil},{6,cf(-0.58,-0.4,-0.16,-1.57,-1.83,0),1,3,54,nil,nil},{7,cf(-10.040000000000001,30.53,1.49,0,-0,1.57),0,nil,nil,nil,nil},{8,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,1,58,nil,nil},{7,cf(10.38,31.6,1.58,-0,-0,-1.57),0,nil,nil,nil,nil},{8,cf(-0.58,-0.4,0.16,-1.57,-1.31,0),1,1,60,nil,nil},{9,cf(0.14,40.46,6.8500000000000005,1.57,-0,0),0,nil,nil,nil,nil},{4,cf(-5.78,42.35,-2.75,-0,3.14,-0),3,62,1,nil,nil},{5,cf(0.8,-2.1,-0,1.57,-1.57,0),1,4,63,2,nil},{4,cf(0,0,0,-0,0,0),2,64,54,3,4},{10,cf(9.370000000000001,40.99,-0.54,-0,1.57,0),0,nil,nil,nil,nil},{8,cf(-0.42,-0.4,0.42,-1.57,-0.79,0),1,1,66,nil,nil},{11,cf(0.8,-1,-0.58,-0,-3.14,-1.57),1,4,64,4,nil},{5,cf(0.4,-1.4000000000000001,0.6900000000000001,0,2.09,-1.57),1,3,68,4,nil},{12,cf(6.1000000000000005,42.19,-0.5700000000000001,0,-1.57,-0),0,nil,nil,nil,nil},{4,cf(0,0,0,-0,0,0),2,70,69,1,2},{3,cf(-10.26,40.01,-0.89,-0.79,3.14,-1.57),0,nil,nil,nil,nil},{4,cf(0,0,0,-0,0,0),2,72,69,1,3},{13,cf(5.23,47.72,17.34,1.31,3.14,-0),0,nil,nil,nil,nil},{13,cf(-5.32,47.68,17.330000000000002,1.31,3.14,-0),0,nil,nil,nil,nil},{8,cf(-0.58,-0.4,0.16,-1.57,-1.31,0),1,1,74,nil,nil},{8,cf(-0.58,-0.4,0.16,-1.57,-1.31,0),1,1,75,nil,nil},{13,cf(-0.22,7.05,6.63,1.57,0,0),0,nil,nil,nil,nil},{8,cf(-0.3,-0.4,-0.52,-1.57,-2.62,0),1,1,78,nil,nil},}



--replace till this line

local remote = game:GetService("ReplicatedStorage").Shared.Remotes.PlaceStructure

local lplr = game:GetService('Players').LocalPlayer
local mouse = lplr:GetMouse()
mouse.Button1Down:Wait()
local base = mouse.Target

local placed = {}
local structures = workspace:WaitForChild('Structures')
local run = game:GetService('RunService')



local areaRadius = base.Size.Magnitude+5
for i, v in ipairs(tbl) do
	areaRadius = math.max(areaRadius, v[2].Position.Magnitude)
end

areaRadius+=5

local p = Instance.new('Part', workspace.CurrentCamera)
p.Anchored = true
p.CanCollide = false
p.Material = Enum.Material.ForceField
p.Shape = Enum.PartType.Ball
p.Size = Vector3.new(2,2,2)*areaRadius
p.Color = Color3.new(1,.2, .2)
p.CFrame = CFrame.new(base.CFrame.Position)
local ppos = base.CFrame.Position
task.delay(60*8, function()
	game.Debris:AddItem(p, 1)
end)


local a, b = pcall(function()
	for i, v in ipairs(tbl) do
		run.RenderStepped:Wait()
		local name = names[v[1]]
		local placeMode = v[3]
		if placeMode == 0 then
			run.RenderStepped:Wait()
			remote:FireServer(
				name
				,{
					['BasePart'] = base;
					['CFrame'] = v[2]
				}
			)
		elseif placeMode == 1 then
			local needed = nil
			local s = os.clock()+2
			while needed == nil and os.clock()<s do
				for ii, vv in ipairs(placed[v[5]]:GetDescendants()) do
					if vv:IsA('BasePart') and vv.Name == attachments[ v[4] ] then
						needed = vv
						break
					end
				end
				run.RenderStepped:Wait()
			end
			remote:FireServer(
				name
				,{
					['BasePart'] = needed ;
					['CFrame'] = v[2]
				}
				,attachments[ v[6] or v[4] ]
				,needed
			)
		elseif placeMode == 2 then
			local needed1 = nil
			local s = os.clock()+2
			local cf1, cf2 = v[4], v[5]
			local attach1, attach2 = v[6], v[7]
			while needed1 == nil and os.clock()<s do
				for ii, vv in ipairs(placed[cf1]:GetDescendants()) do
					if vv:IsA('BasePart') and vv.Name == attachments[ attach1 ] then
						needed1 = vv
						break
					end
				end
				run.RenderStepped:Wait()
			end
			local needed2 = nil
			local s = os.clock()+2
			while needed2 == nil and os.clock()<s do
				for ii, vv in ipairs(placed[cf2]:GetDescendants()) do
					if vv:IsA('BasePart') and vv.Name == attachments[ attach2 ] then
						needed2 = vv
						break
					end
				end
				run.RenderStepped:Wait()
			end
			remote:FireServer(
				name
				,{
					[1]={ ['CFrame'] = needed1 };
					[2]= { ['CFrame'] = needed2 };
				}
			)
		elseif placeMode == 3 then
			local needed1 = nil
			local s = os.clock()+2
			local cf, basepart, attahment = v[2] , v[4], v[5]
			local attach1
			while needed1 == nil and os.clock()<s do
				for ii, vv in ipairs(placed[basepart]:GetDescendants()) do
					if vv:IsA('BasePart') and vv.Name == attachments[ attahment ] then
						needed1 = vv
						break
					end
				end
				run.RenderStepped:Wait()
			end
			remote:FireServer(
				name
				,{
					[1]={ ['CFrame'] = needed1 };
					[2]= { ['CFrame'] = cf, BasePart = base };
				}
			)
		end
		--if (model:GetPivot().Position-targetPos).Magnitude<= ( placeMode == 0 and 40 or 40 ) or (model:GetPivot().Position-base.Position).Magnitude <= areaRadius then
		local targetPos = (base.CFrame*v[2]).Position
		local found, s = false, os.clock()+60*5

		local con = structures.ChildAdded:Connect(function(model)
			if model.Name == name and not model:FindFirstChild('IsBlueprint') and not model:WaitForChild('IsBlueprint', .1) then
				
				local ss = os.clock()+2
				while ss>os.clock() and model.PrimaryPart == nil do run.RenderStepped:Wait() end
				if (model:GetPivot().Position-targetPos).Magnitude<= ( placeMode == 0 and 40 or 40 ) or (model:GetPivot().Position-ppos).Magnitude <= areaRadius then
					found = model
				end
			end
		end)
		repeat run.RenderStepped:Wait() until found~=false or os.clock()>s
		con:Disconnect()
		if found then
			placed[i] = found
		end
		
	end
end)

p:Destroy()

print(a, b)



