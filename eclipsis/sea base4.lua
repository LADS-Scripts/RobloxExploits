names = {'Submersible','Wall','Four-Way','T-Junction','Cap','Pipe','Distributor','Fabricator','Distributor Cap','Spawn Point','Arc Turret','Shield Generator','Upgrade Station','Automechanic','Arsenal','Reservoir','Elbow','Point Defense','Turret',};
attachments = {'FemaleFlange','FemaleFlange3','FemaleFlange1','FemaleFlange4','FemaleFlange2','WallSnap1','WallSnap2',};
local n
local cf = function(xp, yp, zp, xr, yr, zr)
	return cfn(xp, yp, zp)*cfa(xr,yr,zr)
end
cfn, cfa = CFrame.new, CFrame.fromEulerAnglesYXZ
local tbl = {
{1,cf(-0.145,0.65,4.16,-0,-0,0),0,n,n,n,n},{2,cf(-13.91,-0.405,-9.89,-0,-3.14,-0),0,n,n,n,n},{2,cf(13.855,-0.405,-10.11,0,-0,0),0,n,n,n,n},{3,cf(-0.8,-2.1,0,1.57,1.57,0),1,1,1,2,n},{4,cf(0,-2.1,0.8,1.57,3.14,0),1,3,4,2,n},{3,cf(0,-2.1,0.8,1.57,3.14,0),1,3,5,2,n},{5,cf(-0.155,-0.4,0.58,-1.57,-0.26,0),1,4,6,n,n},{5,cf(0.155,-0.4,0.58,-1.57,0.26,0),1,5,6,n,n},{4,cf(0.8,-2.1,-0,1.57,-1.57,0),1,3,6,2,n},{6,cf(-0.11,19.655,-14.915,-1.57,0,0),3,9,5,n,n},{4,cf(0.8,-1.4,-0,-0,-3.14,-1.57),1,5,10,5,n},{7,cf(19.825,21.005,-13.535,-0,-1.57,1.57),0,n,n,n,n},{6,cf(0,0,0,-0,0,0),2,12,11,1,2},{7,cf(-19.87,21.035,-13.315,0,1.57,-1.57),0,n,n,n,n},{6,cf(0,0,0,-0,0,0),2,14,11,1,3},{1,cf(4.505,0.65,5.85,-0,0,0),0,n,n,n,n},{6,cf(0,0,0,-0,0,0),2,16,4,1,5},{1,cf(-4.52,0.65,5.805,-0,0,0),0,n,n,n,n},{6,cf(0,0,0,-0,0,0),2,18,4,1,4},{2,cf(0,-2,8,-0,-1.57,0),1,6,2,7,n},{8,cf(-25.035,20.075,5.895,0,-3.14,-1.57),0,n,n,n,n},{9,cf(-0.52,-0.4,-0.3,-1.57,-2.095,0),1,1,21,n,n},{10,cf(-17.43,13.81,-13.315,-0,-1.57,1.57),0,n,n,n,n},{9,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,1,23,n,n},{11,cf(-18.49,13.99,-4.47,-0,3.14,1.57),0,n,n,n,n},{9,cf(-0.58,-0.4,-0.155,-1.57,-1.835,0),1,1,25,n,n},{1,cf(-0.15,3.03,4.165,0,-0,-0),0,n,n,n,n},{3,cf(-0.8,-2.1,0,1.57,1.57,0),1,1,27,2,n},{3,cf(0,-2.1,0.8,1.57,3.14,0),1,3,28,2,n},{6,cf(0,0,0,-0,0,0),2,5,29,5,5},{5,cf(-0.425,-0.4,0.425,-1.57,-0.785,0),1,3,29,n,n},{1,cf(-4.52,3.03,5.815,0,0,-0),0,n,n,n,n},{6,cf(0,0,0,-0,0,0),2,32,28,1,4},{8,cf(-25.035,15.805,5.885,-0,-3.14,-1.57),0,n,n,n,n},{9,cf(-0.58,-0.4,-0.155,-1.57,-1.835,0),1,1,34,n,n},{1,cf(4.505,3.03,5.8,0,0,-0),0,n,n,n,n},{6,cf(0,0,0,-0,0,0),2,28,36,5,1},{8,cf(-25.035,15.81,1.87,0,0,1.57),0,n,n,n,n},{9,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,1,38,n,n},{1,cf(-0.185,5.41,4.12,0,-0,-0),0,n,n,n,n},{3,cf(-0.8,-2.1,0,1.57,1.57,0),1,1,40,2,n},{3,cf(0,-2.1,0.8,1.57,3.14,0),1,3,41,2,n},{5,cf(0,-0.4,0.6,-1.57,-0,0),1,3,42,n,n},{6,cf(0,0,0,-0,0,0),2,29,42,4,4},{1,cf(4.515,5.41,5.74,0,-0,-0),0,n,n,n,n},{6,cf(0,0,0,-0,0,0),2,45,41,1,5},{8,cf(-25.035,19.965,1.89,-0,0,1.57),0,n,n,n,n},{9,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,1,47,n,n},{8,cf(-25.035,11.645,0.145,0,0,1.57),0,n,n,n,n},{9,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,1,49,n,n},{1,cf(-4.545,5.41,5.755,0,-0,-0),0,n,n,n,n},{6,cf(0,0,0,-0,0,0),2,51,41,1,4},{8,cf(-25.035,6.485,0.1,-0,-0,1.57),0,n,n,n,n},{9,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,1,53,n,n},{2,cf(0,-2,-8,0,1.57,0),1,6,3,7,n},{1,cf(-0.18,7.79,4.105,0,-0,-0),0,n,n,n,n},{1,cf(4.5,7.79,5.68,0,-0,-0),0,n,n,n,n},{1,cf(-4.415,7.79,5.715,0,-0,-0),0,n,n,n,n},{3,cf(-0.8,-2.1,0,1.57,1.57,0),1,1,56,2,n},{3,cf(0,-2.1,0.8,1.57,3.14,0),1,3,59,2,n},{5,cf(0,-0.4,0.6,-1.57,-0,0),1,3,60,n,n},{6,cf(0,0,0,-0,0,0),2,42,60,5,5},{6,cf(0,0,0,-0,0,0),2,59,57,5,1},{6,cf(0,0,0,-0,0,0),2,59,58,4,1},{12,cf(-25.335,20.3,-9.625,0,0,1.57),0,n,n,n,n},{12,cf(-25.335,15.27,-9.625,0,0,1.57),0,n,n,n,n},{12,cf(-25.605,9.755,-8.795,0,-0,1.31),0,n,n,n,n},{12,cf(-26.26,4.895,-8.73,0,-0,1.31),0,n,n,n,n},{9,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,1,68,n,n},{9,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,1,67,n,n},{9,cf(-0.58,-0.4,0.155,-1.57,-1.31,0),1,1,66,n,n},{9,cf(-0.58,-0.4,0.155,-1.57,-1.31,0),1,1,65,n,n},{12,cf(25.275,20.045,-9.995,-0,0,-1.57),0,n,n,n,n},{12,cf(25.275,14.96,-9.975,-0,0,-1.57),0,n,n,n,n},{12,cf(25.63,9.14,-9,0,-0,-1.31),0,n,n,n,n},{12,cf(26.34,3.895,-8.875,0,-0,-1.31),0,n,n,n,n},{9,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,1,74,n,n},{9,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,1,73,n,n},{9,cf(-0.58,-0.4,0.155,-1.57,-1.31,0),1,1,75,n,n},{9,cf(-0.58,-0.4,0.155,-1.57,-1.31,0),1,1,76,n,n},{1,cf(-0.205,10.165,4.035,0,-0,-0),0,n,n,n,n},{1,cf(4.515,10.165,5.635,0,-0,-0),0,n,n,n,n},{1,cf(-4.175,10.165,5.63,0,-0,-0),0,n,n,n,n},{3,cf(-0.8,-2.1,0,1.57,1.57,0),1,1,81,2,n},{3,cf(0,-2.1,0.8,1.57,3.14,0),1,3,84,2,n},{6,cf(0,0,0,-0,0,0),2,82,84,1,5},{6,cf(0,0,0,-0,0,0),2,84,83,4,1},{6,cf(0,0,0,-0,0,0),2,60,85,4,4},{8,cf(24.975,20.135,-2.25,-0,3.14,1.57),0,n,n,n,n},{9,cf(-0.58,-0.4,0.155,-1.57,-1.31,0),1,1,89,n,n},{13,cf(-12.275,13.835,-14.515,0,1.57,-1.57),0,n,n,n,n},{6,cf(0,0,0,-0,0,0),2,91,85,1,3},{8,cf(24.975,14.78,-2.255,-0,3.14,1.57),0,n,n,n,n},{9,cf(-0.58,-0.4,0.155,-1.57,-1.31,0),1,1,93,n,n},{11,cf(18.43,12.39,-4.085,0,-3.14,-1.57),0,n,n,n,n},{9,cf(-0.52,-0.4,0.3,-1.57,-1.045,0),1,1,95,n,n},{8,cf(24.975,9.135,-1.39,-0,3.14,1.57),0,n,n,n,n},{9,cf(-0.58,-0.4,0.155,-1.57,-1.31,0),1,1,97,n,n},{8,cf(24.975,20.11,5.585,0,-0,-1.57),0,n,n,n,n},{9,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,1,99,n,n},{8,cf(26.13,3.975,3.875,0,0,-1.435),0,n,n,n,n},{9,cf(-0.58,-0.4,-0.155,-1.57,-1.835,0),1,1,101,n,n},{8,cf(24.975,12.595,5.34,0,3.14,1.57),0,n,n,n,n},{9,cf(-0.58,-0.4,0.155,-1.57,-1.31,0),1,1,103,n,n},{14,cf(-21.96,23.585,3.53,-0,0,0),0,n,n,n,n},{9,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,1,105,n,n},{14,cf(21.85,23.585,4.605,-0,0,0),0,n,n,n,n},{9,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,1,107,n,n},{1,cf(-0.24,12.545,3.99,0,-0,-0),0,n,n,n,n},{1,cf(4.535,12.545,5.565,0,-0,-0),0,n,n,n,n},{1,cf(-4.37,12.545,5.555,0,-0,-0),0,n,n,n,n},{3,cf(-0.8,-2.1,0,1.57,1.57,0),1,1,109,2,n},{3,cf(0,-2.1,0.8,1.57,3.14,0),1,3,112,2,n},{6,cf(0,0,0,-0,0,0),2,85,113,5,5},{6,cf(0,0,0,-0,0,0),2,112,110,5,1},{6,cf(0,0,0,-0,0,0),2,112,111,4,1},{15,cf(13.36,12.185,-13.635,1.57,3.14,0),0,n,n,n,n},{6,cf(0,0,0,-0,0,0),2,117,113,1,3},{1,cf(-0.155,14.925,3.99,0,-0,-0),0,n,n,n,n},{1,cf(-4.53,14.925,5.605,0,-0,-0),0,n,n,n,n},{1,cf(4.46,14.925,5.595,0,-0,-0),0,n,n,n,n},{1,cf(-0.17,17.305,3.975,0,-0,-0),0,n,n,n,n},{1,cf(-4.615,17.305,5.565,0,-0,-0),0,n,n,n,n},{1,cf(4.46,17.305,5.605,0,-0,-0),0,n,n,n,n},{3,cf(-0.8,-2.1,0,1.57,1.57,0),1,1,119,2,n},{3,cf(0,-2.1,0.8,1.57,3.14,0),1,3,125,2,n},{3,cf(-0.8,-2.1,0,1.57,1.57,0),1,1,122,2,n},{3,cf(0,-2.1,0.8,1.57,3.14,0),1,3,127,2,n},{6,cf(0,0,0,-0,0,0),2,113,126,4,4},{6,cf(0,0,0,-0,0,0),2,126,128,5,5},{6,cf(0,0,0,-0,0,0),2,125,121,5,1},{6,cf(0,0,0,-0,0,0),2,124,127,1,5},{6,cf(0,0,0,-0,0,0),2,125,120,4,1},{6,cf(0,0,0,-0,0,0),2,123,127,1,4},{5,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,3,126,n,n},{5,cf(-0.58,-0.4,-0.155,-1.57,-1.835,0),1,3,128,n,n},{1,cf(-0.15,19.685,3.915,0,-0,-0),0,n,n,n,n},{3,cf(-0.8,-2.1,0,1.57,1.57,0),1,1,137,2,n},{3,cf(0,-2.1,0.8,1.57,3.14,0),1,3,138,2,n},{5,cf(-0,-0.4,0.6,-1.57,-0,0),1,3,139,n,n},{6,cf(0,0,0,-0,0,0),2,128,139,4,4},{5,cf(0,-0.4,0.6,-1.57,-0,0),1,5,139,n,n},{16,cf(-11.115,14.34,-6.37,1.57,-0,0),0,n,n,n,n},{17,cf(0.575,-1,0.8,0,1.57,-1.57),1,1,143,5,n},{6,cf(0,0,0,-0,0,0),2,144,138,3,4},{16,cf(12.96,14.345,-6.59,1.57,0,0),0,n,n,n,n},{17,cf(0.575,-1,0.8,0,1.57,-1.57),1,1,146,5,n},{6,cf(0,0,0,-0,0,0),2,147,138,3,5},{18,cf(1.28,29.15,-7.59,-1.57,-0,0),0,n,n,n,n},{9,cf(-0.425,-0.4,0.425,-1.57,-0.785,0),1,1,149,n,n},{18,cf(13.7,12.94,-20.535,0,1.57,-1.57),0,n,n,n,n},{9,cf(-0.3,-0.4,0.52,-1.57,-0.525,0),1,1,151,n,n},{19,cf(-12.08,23.985,-9.985,-0,-1.57,0),0,n,n,n,n},{9,cf(-0.58,-0.4,0.155,-1.57,-1.31,0),1,1,153,n,n},{19,cf(12.595,23.985,-10.315,0,1.57,0),0,n,n,n,n},{9,cf(-0.58,-0.4,-0.155,-1.57,-1.835,0),1,1,155,n,n},{14,cf(-14.01,21.705,4.455,1.31,3.14,-0),0,n,n,n,n},{14,cf(-7.985,21.7,4.455,1.31,3.14,-0),0,n,n,n,n},{9,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,1,157,n,n},{9,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,1,158,n,n},{14,cf(7.5,22.435,4.4,1.31,3.14,-0),0,n,n,n,n},{14,cf(13.305,22.43,4.4,1.31,3.14,-0),0,n,n,n,n},{9,cf(-0.6,-0.4,-0,-1.57,-1.57,0),1,1,161,n,n},{9,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,1,162,n,n},{14,cf(-11.455,5.99,4.665,-1.31,3.14,-3.14),0,n,n,n,n},{9,cf(-0.6,-0.4,-0,-1.57,-1.57,0),1,1,165,n,n},{14,cf(11.91,7.39,4.125,-1.31,3.14,-3.14),0,n,n,n,n},{9,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,1,167,n,n},{18,cf(-13.205,26.21,-15.525,1.31,-0,3.14),0,n,n,n,n},{9,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,1,169,n,n},{19,cf(-13.35,4.89,-13.415,-0,1.57,-1.57),0,n,n,n,n},{9,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,1,171,n,n},}




--replace till this line


local remote = game:GetService("ReplicatedStorage").Shared.Remotes.PlaceStructure

local lplr = game:GetService('Players').LocalPlayer
local mouse = lplr:GetMouse()
mouse.Button1Down:Wait()
local base = mouse.Target

local placed = {}
local structures = workspace:WaitForChild('Structures')
local run = game:GetService('RunService')



local areaRadius = base.Size.Magnitude+5
for i, v in ipairs(tbl) do
	areaRadius = math.max(areaRadius, v[2].Position.Magnitude)
end

areaRadius+=5


local p = Instance.new('Part', workspace.CurrentCamera)
p.Anchored = true
p.CanCollide = false
p.Material = Enum.Material.ForceField
p.Shape = Enum.PartType.Ball
p.Size = Vector3.new(2,2,2)*areaRadius
p.Color = Color3.new(1,.2, .2)
p.CFrame = CFrame.new(base.CFrame.Position)
local ppos = base.CFrame.Position
task.delay(60*8, function()
	game.Debris:AddItem(p, 1)
end)

_rancalls = 0
local ranpos = function()
    _rancalls+=1
    if _rancalls>=10000 then
        _rancalls = math.random(-10000, 1000)
    end
    
    math.randomseed(_rancalls)
    return Vector3.new(
        math.random(-7000, 7000)
        ,math.random(-7000, 7000)
        ,math.random(-7000, 7000)
    )/40000
end

local searchConnection

local placeStructure = function(i, v, tries)
    local name = names[v[1]]
    print('loading', name)
    local placeMode = v[3]
    if placeMode == 0 then
        remote:FireServer(
            name
            ,{
                ['BasePart'] = base;
                ['CFrame'] = v[2] + (tries <4 and Vector3.new() or ranpos())
            }
        )
    elseif placeMode == 1 then
        local needed = nil
        local s = os.clock()+2
        while needed == nil and os.clock()<s do
            for ii, vv in ipairs(placed[v[5]]:GetDescendants()) do
                if vv:IsA('BasePart') and vv.Name == attachments[ v[4] ] then
                    needed = vv
                    break
                end
            end
            run.RenderStepped:Wait()
        end
        remote:FireServer(
            name
            ,{
                ['BasePart'] = needed ;
                ['CFrame'] = v[2]
            }
            ,attachments[ v[6] or v[4] ]
            ,needed
        )
    elseif placeMode == 2 then
        local needed1 = nil
        local s = os.clock()+2
        local cf1, cf2 = v[4], v[5]
        local attach1, attach2 = v[6], v[7]
        while needed1 == nil and os.clock()<s do
            for ii, vv in ipairs(placed[cf1]:GetDescendants()) do
                if vv:IsA('BasePart') and vv.Name == attachments[ attach1 ] then
                    needed1 = vv
                    break
                end
            end
            run.RenderStepped:Wait()
        end
        local needed2 = nil
        local s = os.clock()+2
        while needed2 == nil and os.clock()<s do
            for ii, vv in ipairs(placed[cf2]:GetDescendants()) do
                if vv:IsA('BasePart') and vv.Name == attachments[ attach2 ] then
                    needed2 = vv
                    break
                end
            end
            run.RenderStepped:Wait()
        end
        remote:FireServer(
            name
            ,{
                [1]={ ['CFrame'] = needed1 };
                [2]= { ['CFrame'] = needed2 };
            }
        )
    elseif placeMode == 3 then
        local needed1 = nil
        local s = os.clock()+2
        local cf, basepart, attahment = v[2] , v[4], v[5]
        local attach1
        while needed1 == nil and os.clock()<s do
            for ii, vv in ipairs(placed[basepart]:GetDescendants()) do
                if vv:IsA('BasePart') and vv.Name == attachments[ attahment ] then
                    needed1 = vv
                    break
                end
            end
            run.RenderStepped:Wait()
        end
        remote:FireServer(
            name
            ,{
                [1]={ ['CFrame'] = needed1 };
                [2]= { ['CFrame'] = cf, BasePart = base };
            }
        )
    end
    --if (model:GetPivot().Position-targetPos).Magnitude<= ( placeMode == 0 and 40 or 40 ) or (model:GetPivot().Position-base.Position).Magnitude <= areaRadius then
    local found, s = false, os.clock()+1

    local searchConnection = searchConnection or structures.ChildAdded:Connect(function(model)
        if model.Name == name and not model:FindFirstChild('IsBlueprint') and model:WaitForChild('Builder', 1) then
            
            local ss = os.clock()+5
            while ss>os.clock() and model.PrimaryPart == nil do run.RenderStepped:Wait() end
            if (model:GetPivot().Position-ppos).Magnitude <= areaRadius then
                found = model
            end
        end
    end)
    repeat run.RenderStepped:Wait() until found~=false or os.clock()>s
    if found then
        placed[i] = found
        return true
    end
end


local a, b = pcall(function()
	for i, v in ipairs(tbl) do
        local placed = false
        local send = os.clock()+60*2
        tries = 0
		repeat
            tries += 1
            placed = placeStructure(i, v, tries)
            if placed and searchConnection then
                searchConnection:Disconnect()
                searchConnection = nil
            end
        until placed or os.clock()>send

        if os.clock()>send then
            warn(i, v[i], 'failed')
            break
        end
	end
end)

p:Destroy()

print(a, b)



