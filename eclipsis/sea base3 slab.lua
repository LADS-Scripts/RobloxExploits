names = {'Submersible','Wall','Four-Way','Pipe','Cap','Distributor','Fabricator','Distributor Cap','Spawn Point','Shield Generator','Arc Turret','Upgrade Station','T-Junction','Arsenal','Elbow','Reservoir','Point Defense','Automechanic',};
attachments = {'FemaleFlange','FemaleFlange3','FemaleFlange1','FemaleFlange2','FemaleFlange4','WallSnap1','WallSnap2',};
local n
local cf = function(xp, yp, zp, xr, yr, zr)
	return cfn(xp, yp, zp)*cfa(xr,yr,zr)
end
cfn, cfa = CFrame.new, CFrame.fromEulerAnglesYXZ
local tbl = {
{1,cf(-0.04,0.65,3.83,-0,0,0),0,n,n,n,n},{2,cf(13.865,-0.425,-10.305,0,3.14,-0),0,n,n,n,n},{2,cf(-13.945,-0.42,-10.485,-0,3.14,-0),0,n,n,n,n},{3,cf(-0.8,-2.1,0,1.57,1.57,0),1,1,1,2,n},{3,cf(0,-2.1,0.8,1.57,3.14,0),1,3,4,2,n},{4,cf(0.3,1.15,-16.01,-0,3.14,0),3,5,3,n,n},{3,cf(0.8,-1.4,0,-0,-0,1.57),1,4,6,5,n},{5,cf(-0.3,-0.4,0.52,-1.57,-0.525,0),1,5,5,n,n},{6,cf(-19.905,2.055,-15.32,-0,1.57,-1.435),0,n,n,n,n},{4,cf(0,0,0,-0,0,0),2,9,7,1,3},{6,cf(19.83,1.55,-15.21,-0,-1.57,1.435),0,n,n,n,n},{4,cf(0,0,0,-0,0,0),2,11,7,1,2},{1,cf(4.53,0.65,5.915,-0,0,0),0,n,n,n,n},{4,cf(0,0,0,-0,0,0),2,13,4,1,4},{1,cf(-4.6,0.65,5.79,-0,0,0),0,n,n,n,n},{4,cf(0,0,0,-0,0,0),2,15,4,1,5},{2,cf(0,-2,8,0,-1.57,0),1,6,3,7,n},{7,cf(-25.07,20.315,5.395,-0,-0,1.57),0,n,n,n,n},{8,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,1,18,n,n},{1,cf(-0.03,3.03,3.86,0,0,-0),0,n,n,n,n},{3,cf(-0.8,-2.1,0,1.57,1.57,0),1,1,20,2,n},{3,cf(0,-2.1,0.8,1.57,3.14,0),1,3,21,2,n},{5,cf(0,-0.4,0.6,-1.57,-0,0),1,3,22,n,n},{4,cf(0,0,0,-0,0,0),2,5,22,4,4},{1,cf(-4.6,3.03,5.665,0,0,-0),0,n,n,n,n},{4,cf(0,0,0,-0,0,0),2,25,21,1,5},{7,cf(-25.07,16.02,5.375,-0,-0,1.57),0,n,n,n,n},{8,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,1,27,n,n},{1,cf(4.545,3.03,5.76,0,0,-0),0,n,n,n,n},{4,cf(0,0,0,-0,0,0),2,29,21,1,4},{2,cf(0,-2,8,0,-1.57,0),1,7,2,7,n},{9,cf(-17.41,12.01,-13.91,-0,-1.57,1.57),0,n,n,n,n},{8,cf(-0.425,-0.4,0.425,-1.57,-0.785,0),1,1,32,n,n},{7,cf(24.99,20.25,5.435,0,-0,-1.57),0,n,n,n,n},{8,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,1,34,n,n},{1,cf(0.07,5.41,3.82,0,-0,-0),0,n,n,n,n},{3,cf(-0.8,-2.1,0,1.57,1.57,0),1,1,36,2,n},{3,cf(0,-2.1,0.8,1.57,3.14,0),1,3,37,2,n},{5,cf(0,-0.4,0.6,-1.57,-0,0),1,3,38,n,n},{4,cf(0,0,0,-0,0,0),2,22,38,5,5},{1,cf(4.54,5.41,5.76,0,-0,-0),0,n,n,n,n},{7,cf(-25.07,11.79,5.36,-0,-0,1.57),0,n,n,n,n},{8,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,1,42,n,n},{4,cf(0,0,0,-0,0,0),2,37,41,4,1},{7,cf(24.99,16.03,5.395,0,-0,-1.57),0,n,n,n,n},{8,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,1,45,n,n},{1,cf(-4.665,5.41,5.6,0,0,-0),0,n,n,n,n},{4,cf(0,0,0,-0,0,0),2,47,37,1,5},{7,cf(24.99,11.805,5.395,-0,0,-1.57),0,n,n,n,n},{8,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,1,49,n,n},{7,cf(-25.07,20.235,-1.015,-0,-0,1.57),0,n,n,n,n},{8,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,1,51,n,n},{1,cf(0.135,7.79,3.795,0,0,-0),0,n,n,n,n},{3,cf(-0.8,-2.1,0,1.57,1.57,0),1,1,53,2,n},{3,cf(0,-2.1,0.8,1.57,3.14,0),1,3,54,2,n},{5,cf(0,-0.4,0.6,-1.57,-0,0),1,3,55,n,n},{4,cf(0,0,0,-0,0,0),2,38,55,4,4},{7,cf(-25.07,15.97,-1.025,0,0,1.57),0,n,n,n,n},{8,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,1,58,n,n},{7,cf(-25.07,11.78,-1.05,-0,-0,1.57),0,n,n,n,n},{8,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,1,60,n,n},{1,cf(4.625,7.79,5.745,0,0,-0),0,n,n,n,n},{4,cf(0,0,0,-0,0,0),2,62,54,1,4},{1,cf(-4.745,7.79,5.66,0,0,-0),0,n,n,n,n},{4,cf(0,0,0,-0,0,0),2,64,54,1,5},{7,cf(24.99,20.305,-0.79,0,0,-1.57),0,n,n,n,n},{8,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,1,66,n,n},{7,cf(24.99,11.585,-0.96,0,0,-1.57),0,n,n,n,n},{8,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,1,68,n,n},{7,cf(24.99,16,-1.23,0,-0,-1.57),0,n,n,n,n},{8,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,1,70,n,n},{1,cf(0.165,10.165,3.685,0,0,-0),0,n,n,n,n},{3,cf(-0.8,-2.1,0,1.57,1.57,0),1,1,72,2,n},{3,cf(0,-2.1,0.8,1.57,3.14,0),1,3,73,2,n},{5,cf(-0,-0.4,0.6,-1.57,-0,0),1,3,74,n,n},{4,cf(0,0,0,-0,0,0),2,55,74,5,5},{1,cf(4.72,10.165,5.69,0,0,-0),0,n,n,n,n},{1,cf(-4.805,10.165,5.68,0,0,-0),0,n,n,n,n},{4,cf(0,0,0,-0,0,0),2,77,73,1,4},{4,cf(0,0,0,-0,0,0),2,73,78,5,1},{1,cf(0.23,12.545,3.575,0,0,-0),0,n,n,n,n},{1,cf(4.805,12.545,5.69,0,0,-0),0,n,n,n,n},{1,cf(-4.915,12.545,5.59,0,0,-0),0,n,n,n,n},{3,cf(-0.8,-2.1,0,1.57,1.57,0),1,1,81,2,n},{3,cf(0,-2.1,0.8,1.57,3.14,0),1,3,84,2,n},{4,cf(0,0,0,-0,0,0),2,74,85,4,4},{5,cf(-0,-0.4,0.6,-1.57,-0,0),1,3,85,n,n},{4,cf(0,0,0,-0,0,0),2,82,84,1,4},{4,cf(0,0,0,-0,0,0),2,84,83,5,1},{10,cf(-25.37,20.205,-9.895,-0,0,1.57),0,n,n,n,n},{10,cf(-25.37,15.445,-9.94,-0,0,1.57),0,n,n,n,n},{10,cf(-25.37,10.755,-9.96,-0,0,1.57),0,n,n,n,n},{10,cf(-26.355,4.4,-9.085,-0,0,1.31),0,n,n,n,n},{8,cf(-0.6,-0.4,-0,-1.57,-1.57,0),1,1,93,n,n},{8,cf(-0.58,-0.4,0.155,-1.57,-1.31,0),1,1,92,n,n},{8,cf(-0.58,-0.4,0.155,-1.57,-1.31,0),1,1,91,n,n},{8,cf(-0.58,-0.4,0.155,-1.57,-1.31,0),1,1,90,n,n},{10,cf(25.29,20.23,-10.24,0,-0,-1.57),0,n,n,n,n},{10,cf(25.29,15.23,-10.21,0,-0,-1.57),0,n,n,n,n},{10,cf(25.29,10.2,-10.22,0,-0,-1.57),0,n,n,n,n},{10,cf(26.275,4.45,-9.055,-0,-0,-1.31),0,n,n,n,n},{8,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,1,100,n,n},{8,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,1,99,n,n},{8,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,1,98,n,n},{8,cf(-0.58,-0.4,0.155,-1.57,-1.31,0),1,1,101,n,n},{11,cf(-18.52,6.37,-4.485,-0,3.14,1.57),0,n,n,n,n},{8,cf(-0.425,-0.4,-0.425,-1.57,-2.355,0),1,1,106,n,n},{11,cf(18.445,6.57,-3.865,0,-3.14,-1.57),0,n,n,n,n},{8,cf(-0.425,-0.4,0.425,-1.57,-0.785,0),1,1,108,n,n},{1,cf(0.29,14.925,3.53,0,0,-0),0,n,n,n,n},{1,cf(-3.955,14.925,5.57,0,0,-0),0,n,n,n,n},{1,cf(4.805,14.925,5.64,0,0,-0),0,n,n,n,n},{3,cf(-0.8,-2.1,0,1.57,1.57,0),1,1,110,2,n},{3,cf(0,-2.1,0.8,1.57,3.14,0),1,3,113,2,n},{5,cf(0.155,-0.4,0.58,-1.57,0.26,0),1,3,114,n,n},{4,cf(0,0,0,-0,0,0),2,85,114,5,5},{4,cf(0,0,0,-0,0,0),2,112,113,1,4},{4,cf(0,0,0,-0,0,0),2,113,111,5,1},{1,cf(0.32,17.305,3.49,0,0,-0),0,n,n,n,n},{3,cf(-0.8,-2.1,0,1.57,1.57,0),1,1,119,2,n},{3,cf(0,-2.1,0.8,1.57,3.14,0),1,3,120,2,n},{4,cf(0,0,0,-0,0,0),2,114,121,4,4},{12,cf(-11.72,12.055,-15.11,-0,1.57,-1.57),0,n,n,n,n},{13,cf(0,-2.1,0.8,1.57,3.14,0),1,1,123,2,n},{4,cf(0,0,0,-0,0,0),2,124,121,3,3},{1,cf(4.895,17.305,5.595,0,0,-0),0,n,n,n,n},{1,cf(-3.945,17.305,5.52,0,0,-0),0,n,n,n,n},{4,cf(0,0,0,-0,0,0),2,120,127,5,1},{4,cf(0,0,0,-0,0,0),2,126,120,1,4},{1,cf(0.4,19.685,3.51,0,0,-0),0,n,n,n,n},{3,cf(-0.8,-2.1,0,1.57,1.57,0),1,1,130,2,n},{3,cf(0,-2.1,0.8,1.57,3.14,0),1,3,131,2,n},{4,cf(0,0,0,-0,0,0),2,121,132,5,5},{5,cf(-0,-0.4,0.6,-1.57,-0,0),1,3,132,n,n},{14,cf(13.37,11.93,-13.825,1.57,-3.14,0),0,n,n,n,n},{15,cf(-0.575,-1,-0.8,-0,-1.57,-1.57),1,4,132,4,n},{4,cf(0,0,0,-0,0,0),2,136,135,3,1},{16,cf(-10.89,14.475,-6.96,1.57,0,0),0,n,n,n,n},{16,cf(13.16,14.645,-6.78,1.57,0,0),0,n,n,n,n},{15,cf(0.575,-1,0.8,0,1.57,-1.57),1,1,139,4,n},{4,cf(0,0,0,-0,0,0),2,140,131,3,4},{15,cf(0.575,-1,0.8,0,1.57,-1.57),1,1,138,4,n},{4,cf(0,0,0,-0,0,0),2,142,131,3,5},{17,cf(0.76,29.245,-7.96,-1.57,-0,0),0,n,n,n,n},{8,cf(-0.52,-0.4,0.3,-1.57,-1.045,0),1,1,144,n,n},{17,cf(12.495,12.855,-20.725,-1.57,-0,0),0,n,n,n,n},{8,cf(-0.425,-0.4,-0.425,-1.57,-2.355,0),1,1,146,n,n},{17,cf(-18.2,26.335,-16.165,-1.31,3.14,-3.14),0,n,n,n,n},{8,cf(-0.3,-0.4,-0.52,-1.57,-2.62,0),1,1,148,n,n},{17,cf(19.205,25.72,-15.79,-1.31,3.14,-3.14),0,n,n,n,n},{8,cf(-0.425,-0.4,-0.425,-1.57,-2.355,0),1,1,150,n,n},{18,cf(14.02,25.09,4.74,1.31,3.14,-0),0,n,n,n,n},{8,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,1,152,n,n},{18,cf(8.065,25.035,4.73,1.31,3.14,-0),0,n,n,n,n},{8,cf(-0.6,-0.4,-0,-1.57,-1.57,0),1,1,154,n,n},{18,cf(-4.7,25.11,4.605,1.31,3.14,-0),0,n,n,n,n},{8,cf(-0.6,-0.4,-0,-1.57,-1.57,0),1,1,156,n,n},{18,cf(-10.33,25.025,4.585,1.31,3.14,-0),0,n,n,n,n},{8,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,1,158,n,n},{18,cf(-18.82,19.23,-4.305,-0,3.14,1.57),0,n,n,n,n},{18,cf(-18.82,12.8,-4.325,-0,3.14,1.57),0,n,n,n,n},{8,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,1,160,n,n},{8,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,1,161,n,n},{18,cf(18.745,12.68,-3.72,0,-3.14,-1.57),0,n,n,n,n},{18,cf(18.745,19.28,-3.855,0,-3.14,-1.57),0,n,n,n,n},{8,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,1,164,n,n},{8,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,1,165,n,n},{11,cf(-8.665,19.89,-13.91,-0,-1.57,1.57),0,n,n,n,n},{8,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,1,168,n,n},{11,cf(7.015,20.095,-13.725,-0,1.57,-1.57),0,n,n,n,n},{8,cf(-0.6,-0.4,0,-1.57,-1.57,0),1,1,170,n,n},}


--replace till this line

local remote = game:GetService("ReplicatedStorage").Shared.Remotes.PlaceStructure

local lplr = game:GetService('Players').LocalPlayer
local mouse = lplr:GetMouse()
mouse.Button1Down:Wait()
local base = mouse.Target

local placed = {}
local structures = workspace:WaitForChild('Structures')
local run = game:GetService('RunService')



local areaRadius = base.Size.Magnitude+5
for i, v in ipairs(tbl) do
	areaRadius = math.max(areaRadius, v[2].Position.Magnitude)
end

areaRadius+=5


local p = Instance.new('Part', workspace.CurrentCamera)
p.Anchored = true
p.CanCollide = false
p.Material = Enum.Material.ForceField
p.Shape = Enum.PartType.Ball
p.Size = Vector3.new(2,2,2)*areaRadius
p.Color = Color3.new(1,.2, .2)
p.CFrame = CFrame.new(base.CFrame.Position)
local ppos = base.CFrame.Position
task.delay(60*8, function()
	game.Debris:AddItem(p, 1)
end)

_rancalls = 0
local ranpos = function()
    _rancalls+=1
    if _rancalls>=10000 then
        _rancalls = math.random(-10000, 1000)
    end
    
    math.randomseed(_rancalls)
    return Vector3.new(
        math.random(-7000, 7000)
        ,math.random(-7000, 7000)
        ,math.random(-7000, 7000)
    )/40000
end

local searchConnection, placeSuccess = nil, false

local placeStructure = function(i, v, tries)
    local name = names[v[1]]
    print('loading', name)
    local placeMode = v[3]
    if placeMode == 0 then
        remote:FireServer(
            name
            ,{
                ['BasePart'] = base;
                ['CFrame'] = v[2] + (tries <6 and Vector3.new() or ranpos())
            }
        )
    elseif placeMode == 1 then
        local needed = nil
        local s = os.clock()+2
        while needed == nil and os.clock()<s do
            for ii, vv in ipairs(placed[v[5]]:GetDescendants()) do
                if vv:IsA('BasePart') and vv.Name == attachments[ v[4] ] then
                    needed = vv
                    break
                end
            end
            run.RenderStepped:Wait()
        end
        remote:FireServer(
            name
            ,{
                ['BasePart'] = needed ;
                ['CFrame'] = v[2]
            }
            ,attachments[ v[6] or v[4] ]
            ,needed
        )
    elseif placeMode == 2 then
        local needed1 = nil
        local s = os.clock()+2
        local cf1, cf2 = v[4], v[5]
        local attach1, attach2 = v[6], v[7]
        while needed1 == nil and os.clock()<s do
            for ii, vv in ipairs(placed[cf1]:GetDescendants()) do
                if vv:IsA('BasePart') and vv.Name == attachments[ attach1 ] then
                    needed1 = vv
                    break
                end
            end
            run.RenderStepped:Wait()
        end
        local needed2 = nil
        local s = os.clock()+2
        while needed2 == nil and os.clock()<s do
            for ii, vv in ipairs(placed[cf2]:GetDescendants()) do
                if vv:IsA('BasePart') and vv.Name == attachments[ attach2 ] then
                    needed2 = vv
                    break
                end
            end
            run.RenderStepped:Wait()
        end
        remote:FireServer(
            name
            ,{
                [1]={ ['CFrame'] = needed1 };
                [2]= { ['CFrame'] = needed2 };
            }
        )
    elseif placeMode == 3 then
        local needed1 = nil
        local s = os.clock()+2
        local cf, basepart, attahment = v[2] , v[4], v[5]
        local attach1
        while needed1 == nil and os.clock()<s do
            for ii, vv in ipairs(placed[basepart]:GetDescendants()) do
                if vv:IsA('BasePart') and vv.Name == attachments[ attahment ] then
                    needed1 = vv
                    break
                end
            end
            run.RenderStepped:Wait()
        end
        remote:FireServer(
            name
            ,{
                [1]={ ['CFrame'] = needed1 };
                [2]= { ['CFrame'] = cf, BasePart = base };
            }
        )
    end
    --if (model:GetPivot().Position-targetPos).Magnitude<= ( placeMode == 0 and 40 or 40 ) or (model:GetPivot().Position-base.Position).Magnitude <= areaRadius then

    if searchConnection ~= nil then task.wait(.15) return end

    local found, s = false, os.clock()+.2

    searchConnection = structures.ChildAdded:Connect(function(model)
        
        delay(.5, function()
            print(tostring(model.Builder.Value.Name) == lplr.Name)
        end)

        if model.Name == name and not model:FindFirstChild('IsBlueprint') and model:WaitForChild('Builder', 1) and tostring(model.Builder.Value.Name) == lplr.Name then
            
            local ss = os.clock()+5
            while ss>os.clock() and model.PrimaryPart == nil do run.RenderStepped:Wait() end
            if ( ( model.PrimaryPart and model.PrimaryPart.CFrame or model:GetPivot() ).Position-ppos).Magnitude <= areaRadius then
                found = model
                placed[i] = found
                placeSuccess = true
            end
        end
    end)
    repeat run.RenderStepped:Wait() until found~=false or os.clock()>s
    if found then
        return true
    else
        return false
    end
end


local a, b = pcall(function()
	for i, v in ipairs(tbl) do
        placeSuccess = false
        local send = os.clock()+60*2
        tries = 0

        if searchConnection then
            searchConnection:Disconnect()
            searchConnection = nil
        end

		repeat
            tries += 1
            placeStructure(i, v, tries)
            if placeSuccess then
                if searchConnection then
                    searchConnection:Disconnect()
                end
                searchConnection = nil
            end
        until placeSuccess == true or os.clock()>send
        
        

        if os.clock()>send then
            warn(i, v[i], 'failed')
            break
        end
	end
    if searchConnection then
        searchConnection:Disconnect()
        searchConnection = nil
    end
end)

p:Destroy()

print(a, b)



