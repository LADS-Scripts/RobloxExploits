names = {'Condenser','Four-Way','T-Junction','Pipe','Cap',};
	attachments = {'FemaleFlange','FemaleFlange3','FemaleFlange1','FemaleFlange4','FemaleFlange2',};
	local cf = function(xp, yp, zp, xr, yr, zr)
	return cfn(xp, yp, zp)*cfa(xr,yr,zr)
end
cfn, cfa = CFrame.new, CFrame.fromEulerAnglesYXZ
local tbl = {{1,cf(0.133,0.85,-1.615,-0,0,0),0,nil,nil,nil,nil},{2,cf(-0.8,-2.1,0,1.571,1.571,0),1,1,1,2,nil},{3,cf(0,-2.1,0.8,1.571,3.142,0),1,3,2,2,nil},{1,cf(4.016,3.5780000000000003,-0.185,-0,-0,-1.571),0,nil,nil,nil,nil},{1,cf(-3.75,3.5460000000000003,-0.163,-0,0,1.571),0,nil,nil,nil,nil},{4,cf(0,0,0,-0,0,0),2,5,2,1,4},{4,cf(0,0,0,-0,0,0),2,2,4,5,1},{1,cf(0.10400000000000001,7.579,-2.345,0,0,-0),0,nil,nil,nil,nil},{2,cf(-0.8,-2.1,0,1.571,1.571,0),1,1,8,2,nil},{3,cf(0,-2.1,0.8,1.571,3.142,0),1,3,9,2,nil},{4,cf(0,0,0,-0,0,0),2,10,3,5,5},{1,cf(3.987,10.23,-0.198,-0,-0,-1.571),0,nil,nil,nil,nil},{1,cf(-3.778,10.332,-0.179,0,0,1.571),0,nil,nil,nil,nil},{4,cf(0,0,0,-0,0,0),2,13,9,1,4},{4,cf(0,0,0,-0,0,0),2,9,12,5,1},{1,cf(0.017,14.309000000000001,-1.617,0,0,-0),0,nil,nil,nil,nil},{2,cf(-0.8,-2.1,0,1.571,1.571,0),1,1,16,2,nil},{3,cf(0,-2.1,0.8,1.571,3.142,0),1,3,17,2,nil},{1,cf(-3.865,17.06,-0.215,-0,0,1.571),0,nil,nil,nil,nil},{1,cf(3.9,17.059,-0.17,0,-0,-1.571),0,nil,nil,nil,nil},{4,cf(0,0,0,-0,0,0),2,17,20,5,1},{4,cf(0,0,0,-0,0,0),2,17,19,4,1},{4,cf(0,0,0,-0,0,0),2,18,10,3,3},{1,cf(0.098,21.038,-1.21,0,-0,-0),0,nil,nil,nil,nil},{1,cf(3.981,23.734,0.211,0,-0,-1.571),0,nil,nil,nil,nil},{1,cf(-3.785,23.768,0.194,0,0,1.571),0,nil,nil,nil,nil},{2,cf(-0.8,-2.1,0,1.571,1.571,0),1,1,24,2,nil},{4,cf(0,0,0,-0,0,0),2,27,25,5,1},{4,cf(0,0,0,-0,0,0),2,27,26,4,1},{3,cf(0,-2.1,0.8,1.571,3.142,0),1,3,27,2,nil},{4,cf(0,0,0,-0,0,0),2,30,18,5,5},{1,cf(0.252,27.768,-0.868,0,-0,-0),0,nil,nil,nil,nil},{1,cf(-3.6310000000000002,30.579,0.579,-0,0,1.571),0,nil,nil,nil,nil},{1,cf(4.134,30.681,0.251,0,-0,-1.571),0,nil,nil,nil,nil},{2,cf(-0.8,-2.1,0,1.571,1.571,0),1,1,32,2,nil},{4,cf(0,0,0,-0,0,0),2,35,34,5,1},{4,cf(0,0,0,-0,0,0),2,35,33,4,1},{3,cf(0,-2.1,0.8,1.571,3.142,0),1,3,35,2,nil},{5,cf(0.424,-0.4,0.424,-1.571,0.785,0),1,5,38,nil,nil},{4,cf(0,0,0,-0,0,0),2,38,30,3,3},}




--replace till this line
local remote = game:GetService("ReplicatedStorage").Shared.Remotes.PlaceStructure

local lplr = game:GetService('Players').LocalPlayer
local mouse = lplr:GetMouse()
mouse.Button1Down:Wait()
local base = mouse.Target

local placed = {}
local structures = workspace:WaitForChild('Structures')
local run = game:GetService('RunService')



local areaRadius = base.Size.Magnitude+5
for i, v in ipairs(tbl) do
	areaRadius = math.max(areaRadius, v[2].Position.Magnitude)
end

areaRadius+=5

local p = Instance.new('Part', workspace.CurrentCamera)
p.Anchored = true
p.CanCollide = false
p.Material = Enum.Material.ForceField
p.Shape = Enum.PartType.Ball
p.Size = Vector3.new(2,2,2)*areaRadius
p.Color = Color3.new(1,.2, .2)
p.CFrame = CFrame.new(base.CFrame.Position)
local ppos = base.CFrame.Position
task.delay(60*8, function()
	game.Debris:AddItem(p, 1)
end) 


local a, b = pcall(function()
	for i, v in ipairs(tbl) do
		run.RenderStepped:Wait()
		local name = names[v[1]]
		local placeMode = v[3]
		if placeMode == 0 then
			run.RenderStepped:Wait()
			remote:FireServer(
				name
				,{
					['BasePart'] = base;
					['CFrame'] = v[2]
				}
			)
		elseif placeMode == 1 then
			local needed = nil
			local s = os.clock()+2
			while needed == nil and os.clock()<s do
				for ii, vv in ipairs(placed) do
					print(ii, vv)
				end
				for ii, vv in ipairs(placed[v[5]]:GetDescendants()) do
					if vv:IsA('BasePart') and vv.Name == attachments[ v[4] ] then
						needed = vv
						break
					end
				end
				run.RenderStepped:Wait()
			end
			remote:FireServer(
				name
				,{
					['BasePart'] = needed ;
					['CFrame'] = v[2]
				}
				,attachments[ v[6] or v[4] ]
				,needed
			)
		elseif placeMode == 2 then
			local needed1 = nil
			local s = os.clock()+2
			local cf1, cf2 = v[4], v[5]
			local attach1, attach2 = v[6], v[7]
			while needed1 == nil and os.clock()<s do
				for ii, vv in ipairs(placed[cf1]:GetDescendants()) do
					if vv:IsA('BasePart') and vv.Name == attachments[ attach1 ] then
						needed1 = vv
						break
					end
				end
				run.RenderStepped:Wait()
			end
			local needed2 = nil
			local s = os.clock()+2
			while needed2 == nil and os.clock()<s do
				for ii, vv in ipairs(placed[cf2]:GetDescendants()) do
					if vv:IsA('BasePart') and vv.Name == attachments[ attach2 ] then
						needed2 = vv
						break
					end
				end
				run.RenderStepped:Wait()
			end
			remote:FireServer(
				name
				,{
					[1]={ ['CFrame'] = needed1 };
					[2]= { ['CFrame'] = needed2 };
				}
			)
		elseif placeMode == 3 then
			local needed1 = nil
			local s = os.clock()+2
			local cf, basepart, attahment = v[2] , v[4], v[5]
			local attach1
			while needed1 == nil and os.clock()<s do
				for ii, vv in ipairs(placed[basepart]:GetDescendants()) do
					if vv:IsA('BasePart') and vv.Name == attachments[ attahment ] then
						needed1 = vv
						break
					end
				end
				run.RenderStepped:Wait()
			end
			remote:FireServer(
				name
				,{
					[1]={ ['CFrame'] = needed1 };
					[2]= { ['CFrame'] = cf, BasePart = base };
				}
			)
		end
		--if (model:GetPivot().Position-targetPos).Magnitude<= ( placeMode == 0 and 40 or 40 ) or (model:GetPivot().Position-base.Position).Magnitude <= areaRadius then
		local targetPos = (base.CFrame*v[2]).Position
		local found, s = false, os.clock()+60*5

		local con = structures.ChildAdded:Connect(function(model)
			if model.Name == name and not model:FindFirstChild('IsBlueprint') and not model:WaitForChild('IsBlueprint', .1) then
				
				local ss = os.clock()+2
				while ss>os.clock() and model.PrimaryPart == nil do run.RenderStepped:Wait() end
				if (model:GetPivot().Position-targetPos).Magnitude<= ( placeMode == 0 and 40 or 40 ) or (model:GetPivot().Position-ppos).Magnitude <= areaRadius then
					found = model
				end
			end
		end)
		repeat run.RenderStepped:Wait() until found~=false or os.clock()>s
		con:Disconnect()
		if found then
			placed[i] = found
		end
		
	end
end)

p:Destroy()

print(a, b)



