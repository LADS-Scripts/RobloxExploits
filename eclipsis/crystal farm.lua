names = {'Crystal Resonator','Four-Way','Pipe','T-Junction','Cap',};
attachments = {'FemaleFlange','FemaleFlange3','FemaleFlange4','FemaleFlange2','FemaleFlange1',};
local n
local cf = function(xp, yp, zp, xr, yr, zr)
    return cfn(xp, yp, zp)*cfa(xr,yr,zr)
end
cfn, cfa = CFrame.new, CFrame.fromEulerAnglesYXZ
local tbl = {
{1,cf(-5.905,0.35,-2.475,-0,-3.14,-0),0,n,n,n,n},{1,cf(-1.18,0.35,-2.46,-0,-3.14,-0),0,n,n,n,n},{1,cf(3.53,0.35,-2.455,-0,-3.14,-0),0,n,n,n,n},{2,cf(-0.8,-2.1,0,1.57,1.57,0),1,1,2,2,n},{3,cf(0,0,0,-0,0,0),2,4,3,3,1},{3,cf(0,0,0,-0,0,0),2,4,1,4,1},{4,cf(0,-2.1,0.8,1.57,-3.14,0),1,5,4,2,n},{1,cf(-1.17,6.8,-2.505,-0,-3.14,-0),0,n,n,n,n},{1,cf(3.52,6.8,-2.505,-0,-3.14,-0),0,n,n,n,n},{1,cf(-6.24,6.8,-2.485,-0,-3.14,-0),0,n,n,n,n},{2,cf(-0.8,-2.1,0,1.57,1.57,0),1,1,8,2,n},{3,cf(0,0,0,-0,0,0),2,11,9,3,1},{3,cf(0,0,0,-0,0,0),2,11,10,4,1},{4,cf(0,-2.1,0.8,1.57,-3.14,0),1,5,11,2,n},{3,cf(0,0,0,-0,0,0),2,14,7,4,4},{5,cf(-0.425,-0.4,0.425,-1.57,-0.785,0),1,5,14,n,n},}




--replace till this line


local remote = game:GetService("ReplicatedStorage").Shared.Remotes.PlaceStructure
local buttonRemote = game:GetService("ReplicatedStorage").Shared.Remotes.ContextButton
local lplr = game:GetService('Players').LocalPlayer
local mouse = lplr:GetMouse()
mouse.Button1Down:Wait()
local base = mouse.Target

local placed = {}
local structures = workspace:WaitForChild('Structures')
local run = game:GetService('RunService')



local areaRadius = base.Size.Magnitude+5
for i, v in ipairs(tbl) do
	areaRadius = math.max(areaRadius, v[2].Position.Magnitude)
end

areaRadius+=5


local p = Instance.new('Part', workspace.CurrentCamera)
p.Anchored = true
p.CanCollide = false
p.Material = Enum.Material.ForceField
p.Shape = Enum.PartType.Ball
p.Size = Vector3.new(2,2,2)*areaRadius
p.Color = Color3.new(1,.2, .2)
p.CFrame = CFrame.new(base.CFrame.Position)
local ppos = base.CFrame.Position
task.delay(60*8, function()
	game.Debris:AddItem(p, 1)
end)

_rancalls = 0
local ranpos = function()
	_rancalls+=1
	if _rancalls>=10000 then
		_rancalls = math.random(-10000, 1000)
	end

	math.randomseed(_rancalls)
	return Vector3.new(
		math.random(-7000, 7000)
		,math.random(-7000, 7000)
		,math.random(-7000, 7000)
	)/40000
end

local searchConnection

local shields = {}

local placeStructure = function(i, v, tries)
	local name = names[v[1]]
	print('loading', name)
	local placeMode = v[3]
	if placeMode == 0 then
		remote:FireServer(
			name
			,{
				['BasePart'] = base;
				['CFrame'] = v[2] + (tries <4 and Vector3.new() or ranpos())
			}
		)
	elseif placeMode == 1 then
		local needed = nil
		local s = os.clock()+2
		while needed == nil and os.clock()<s do
			for ii, vv in ipairs(placed[v[5]]:GetDescendants()) do
				if vv:IsA('BasePart') and vv.Name == attachments[ v[4] ] then
					needed = vv
					break
				end
			end
			run.RenderStepped:Wait()
		end
		remote:FireServer(
			name
			,{
				['BasePart'] = needed ;
				['CFrame'] = v[2]
			}
			,attachments[ v[6] or v[4] ]
			,needed
		)
	elseif placeMode == 2 then
		local needed1 = nil
		local s = os.clock()+2
		local cf1, cf2 = v[4], v[5]
		local attach1, attach2 = v[6], v[7]
		while needed1 == nil and os.clock()<s do
			for ii, vv in ipairs(placed[cf1]:GetDescendants()) do
				if vv:IsA('BasePart') and vv.Name == attachments[ attach1 ] then
					needed1 = vv
					break
				end
			end
			run.RenderStepped:Wait()
		end
		local needed2 = nil
		local s = os.clock()+2
		while needed2 == nil and os.clock()<s do
			for ii, vv in ipairs(placed[cf2]:GetDescendants()) do
				if vv:IsA('BasePart') and vv.Name == attachments[ attach2 ] then
					needed2 = vv
					break
				end
			end
			run.RenderStepped:Wait()
		end
		remote:FireServer(
			name
			,{
				[1]={ ['CFrame'] = needed1 };
				[2]= { ['CFrame'] = needed2 };
			}
		)
	elseif placeMode == 3 then
		local needed1 = nil
		local s = os.clock()+2
		local cf, basepart, attahment = v[2] , v[4], v[5]
		local attach1
		while needed1 == nil and os.clock()<s do
			for ii, vv in ipairs(placed[basepart]:GetDescendants()) do
				if vv:IsA('BasePart') and vv.Name == attachments[ attahment ] then
					needed1 = vv
					break
				end
			end
			run.RenderStepped:Wait()
		end
		remote:FireServer(
			name
			,{
				[1]={ ['CFrame'] = needed1 };
				[2]= { ['CFrame'] = cf, BasePart = base };
			}
		)
	end
	--if (model:GetPivot().Position-targetPos).Magnitude<= ( placeMode == 0 and 40 or 40 ) or (model:GetPivot().Position-base.Position).Magnitude <= areaRadius then
	local found, s = false, os.clock()+1

	if searchConnection then searchConnection:Disconnect() end
	
	searchConnection = structures.ChildAdded:Connect(function(nig)
		local model = nig
		if model.Name == name and model:WaitForChild('Builder', 5) then
			
			local ss = os.clock()+5
			while ss>os.clock() and model.PrimaryPart == nil do run.RenderStepped:Wait() end
			for toilet = 0, 4, 0.016*2 do
				if ( (model.PrimaryPart and model.PrimaryPart.CFrame or model:GetPivot()).Position-ppos).Magnitude <= areaRadius then
					found = model
					break
				else
					run.RenderStepped:Wait()
					run.RenderStepped:Wait()
				end
			end
			if found == false then
				print(model, 'didnt match')
			end

		end
	end)
	repeat run.RenderStepped:Wait() until found~=false or os.clock()>s
	if found then
		placed[i] = found

		local foundClone = found

		coroutine.wrap(function()
			if foundClone.Name == 'Shield Generator' then
				--EnableButton.ContextButton

				local enabled = shields[foundClone]

				if enabled == nil then
					shields[foundClone] = true
				else
					return
				end

				if foundClone:WaitForChild('EnableButton', 5) and foundClone.EnableButton:WaitForChild('ContextButton', 5) then
					task.wait(5)
					buttonRemote:FireServer(foundClone.EnableButton.ContextButton)
				end
			end
		end)()

		return true
	end
end

local skipableparts = {'Cap', 'Distributor Cap'}

local a, b = pcall(function()
	for i, v in ipairs(tbl) do
		local name = names[v[1]]
		local skipable = table.find(skipableparts, name)
		local placed = false
		local send = os.clock()+ (not skipable and 60*2 or 4)
		local tries = 0
		repeat
			tries += 1
			placed = placeStructure(i, v, tries)
			if placed == true and searchConnection ~= nil then
				searchConnection:Disconnect()
				searchConnection = nil
			end
		until placed or os.clock()>send


		if os.clock()>send and not skipable then
			warn(i, v[i], 'failed')
			break
		end
	end
end)



p:Destroy()

print(a, b)





