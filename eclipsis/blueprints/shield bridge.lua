names = {'Shield Generator','Distributor Cap',};
attachments = {'FemaleFlange',};
local n
local cf = function(xp, yp, zp, xr, yr, zr)
	return cfn(xp, yp, zp)*cfa(xr,yr,zr)
end
cfn, cfa = CFrame.new, CFrame.fromEulerAnglesYXZ
local tbl = {
{1,cf(-4.9170,0.9000,-13.4770,-0.0000,1.5710,-0.0000),0},{2,cf(-0.6000,-0.4000,0.0000,-1.5710,-1.5710,0.0000),1,1,1},{1,cf(-4.9120,0.8000,-8.9060,-0.0000,1.5710,-0.0000),0},{2,cf(-0.6000,-0.4000,0.0000,-1.5710,-1.5710,0.0000),1,1,3},{1,cf(-4.9840,0.8000,-4.3200,-0.0000,1.5710,0.0000),0},{2,cf(-0.6000,-0.4000,0.0000,-1.5710,-1.5710,0.0000),1,1,5},{1,cf(-4.9660,0.8000,0.2310,-0.0000,1.5710,0.0000),0},{2,cf(-0.6000,-0.4000,0.0000,-1.5710,-1.5710,0.0000),1,1,7},{1,cf(-4.9950,0.8000,4.7350,-0.0000,1.5710,-0.0000),0},{2,cf(-0.6000,-0.4000,0.0000,-1.5710,-1.5710,0.0000),1,1,9},{1,cf(-4.9690,0.8000,9.3200,-0.0000,1.5710,0.0000),0},{2,cf(-0.6000,-0.4000,0.0000,-1.5710,-1.5710,0.0000),1,1,11},{1,cf(-4.9340,0.9000,13.9140,-0.0000,1.5710,-0.0000),0},{2,cf(-0.6000,-0.4000,0.0000,-1.5710,-1.5710,0.0000),1,1,13},{1,cf(4.9590,0.9000,-13.4980,0.0000,-1.5710,0.0000),0},{2,cf(-0.6000,-0.4000,0.0000,-1.5710,-1.5710,0.0000),1,1,15},{1,cf(4.9600,0.8000,-8.8680,0.0000,-1.5710,0.0000),0},{2,cf(-0.6000,-0.4000,0.0000,-1.5710,-1.5710,0.0000),1,1,17},{1,cf(4.9600,0.8000,-4.2260,0.0000,-1.5710,0.0000),0},{2,cf(-0.6000,-0.4000,0.0000,-1.5710,-1.5710,0.0000),1,1,19},{1,cf(4.9390,0.8000,0.3100,0.0000,-1.5710,0.0000),0},{2,cf(-0.6000,-0.4000,0.0000,-1.5710,-1.5710,0.0000),1,1,21},{1,cf(4.9370,0.8000,4.9570,0.0000,-1.5710,0.0000),0},{2,cf(-0.6000,-0.4000,0.0000,-1.5710,-1.5710,0.0000),1,1,23},{1,cf(4.8050,0.8000,9.4890,0.0000,-1.5710,0.0000),0},{2,cf(-0.6000,-0.4000,0.0000,-1.5710,-1.5710,0.0000),1,1,25},{1,cf(4.9570,0.9000,14.2990,0.0000,-1.5710,0.0000),0},{2,cf(-0.6000,-0.4000,0.0000,-1.5710,-1.5710,0.0000),1,1,27},}


local import = function(toimport)
	return typeof(toimport) == "number" and game:GetObjects("rbxassetid://" .. toimport)[1] or syn and loadstring(syn.request({Url = toimport}).Body)() or loadstring(game:HttpGetAsync(toimport))()
end



local billboard = import(9184931264)
local remote = game:GetService("ReplicatedStorage").Shared.Remotes.PlaceStructure
local buttonRemote = game:GetService("ReplicatedStorage").Shared.Remotes.ContextButton
local lplr = game:GetService('Players').LocalPlayer
local mouse = lplr:GetMouse()
mouse.Button1Down:Wait()
local base = mouse.Target

local placed = {}
local structures = workspace:WaitForChild('Structures')
local run = game:GetService('RunService')
local buildstart = os.clock()



local partsToFind = {
	UpgradeStation = 'Part';
	Arsenal = 'TeamColor';
	['Point Defense'] = 'TeamColor'
}



local _mmreg = {}
local newline = [[
]]
local mmreg = setmetatable({},{
	__newindex = function(_, i, v)
		_mmreg[i..'min'] = _mmreg[i..'min'] ~= nil and math.min(v-11, _mmreg[i..'min']) or  math.huge
		_mmreg[i..'max'] = _mmreg[i..'max'] ~= nil and math.max(v+11, _mmreg[i..'max']) or -math.huge
	end;
	__index = function(_, i)
		return _mmreg[i]
	end;
	__tostring = function()
		local r = ''
		for i, v in pairs(_mmreg) do
			r..=i..' = '..v..newline
		end
		return r
	end
})

for _, v in ipairs(tbl) do
	local pos = v[2].Position
	mmreg.X = pos.X
	mmreg.Y = pos.Y
	mmreg.Z = pos.Z
end

local mincf = CFrame.new(_mmreg.Xmin,_mmreg.Ymin,_mmreg.Zmin)
local maxcf = CFrame.new(_mmreg.Xmax,_mmreg.Ymax,_mmreg.Zmax)

local p = Instance.new('Part', workspace.CurrentCamera)
p.Anchored = true
p.CanCollide = false
p.CanQuery = false
p.Material = Enum.Material.ForceField
p.Size = Vector3.new(maxcf.X-mincf.X,maxcf.Y-mincf.Y,maxcf.Z-mincf.Z)
p.Color = Color3.new(1,.2, .2)
p.CFrame =base.CFrame* CFrame.new( (maxcf.p+mincf.p)/2 )

print(p.CFrame.Position - workspace.CurrentCamera.CFrame.Position)

billboard.Parent = game.CoreGui
billboard.Adornee = p

local totalParts = #tbl
local hsize = p.Size/2
local partCF = p.CFrame

task.delay(60*10, function()
	game.Debris:AddItem(p, 1)
end)

_rancalls = 0
local ranpos = function()
	_rancalls+=1
	if _rancalls>=10000 then
		_rancalls = math.random(-10000, 1000)
	end

	math.randomseed(_rancalls)
	return Vector3.new(
		math.random(-7000, 7000)
		,math.random(-7000, 7000)
		,math.random(-7000, 7000)
	)/40000
end


function isInsideBrick(position)
	local v3 = partCF:PointToObjectSpace(position)
	return (math.abs(v3.X) <= hsize.X)
		and (math.abs(v3.Y) <= hsize.Y)
		and (math.abs(v3.Z) <= hsize.Z)
end






local shields = {}

local enableShield = function(found)
	local foundClone = found
	if foundClone.Name == 'Shield Generator' then
		coroutine.wrap(function()
			local enabled = shields[foundClone]
			if enabled == nil then
				shields[foundClone] = true
			else
				return
			end
			
			if foundClone:WaitForChild('EnableButton', 5) and foundClone.EnableButton:WaitForChild('ContextButton', 5) then
				task.wait(5)
				buttonRemote:FireServer(foundClone.EnableButton.ContextButton)
			end
		end)()
	end
end

local placeStructure = function(i, v, tries)
	local name = names[v[1]]

	billboard.ProgressTotal.Bar.Size = UDim2.fromScale(i/totalParts, 1)
	billboard.ProgressTotal.TextLabel.Text = tostring( math.round(i/totalParts*100) )..'%     '..i..'/'..totalParts..'     '..math.round(os.clock()-buildstart)..'s'
	--billboard.Structure.TextLabel.Text = name
	billboard.StudsOffset = Vector3.new(0, hsize.Y*1.1+5, 0)

	local placeMode = v[3]
	if placeMode == 0 then
		remote:FireServer(
			name
			,{
				['BasePart'] = base;
				['CFrame'] = v[2] + (tries <5 and Vector3.new() or ranpos()) * (tries < 25 and .1 or i/200 )
			}
		)
	elseif placeMode == 1 then -- four way
		local needed = nil
		local s = os.clock()+2
		while needed == nil and os.clock()<s do
			for ii, vv in ipairs(placed[v[5]]:GetDescendants()) do
				if vv:IsA('BasePart') and vv.Name == attachments[ v[4] ] then
					needed = vv
					break
				end
			end
			run.RenderStepped:Wait()
		end
		remote:FireServer(
			name
			,{
				['BasePart'] = needed ;
				['CFrame'] = v[2]
			}
			,string.find(name, 'Cap') and 'FemaleFlange' or attachments[ v[6] or v[4] ]
			,needed
		)
	elseif placeMode == 2 then
		local needed1 = nil
		local s = os.clock()+2
		local cf1, cf2 = v[4], v[5]
		local attach1, attach2 = v[6], v[7]
		while needed1 == nil and os.clock()<s do
			for ii, vv in ipairs(placed[cf1]:GetDescendants()) do
				if vv:IsA('BasePart') and vv.Name == attachments[ attach1 ] then
					needed1 = vv
					break
				end
			end
			run.RenderStepped:Wait()
		end
		local needed2 = nil
		local s = os.clock()+2
		while needed2 == nil and os.clock()<s do
			for ii, vv in ipairs(placed[cf2]:GetDescendants()) do
				if vv:IsA('BasePart') and vv.Name == attachments[ attach2 ] then
					needed2 = vv
					break
				end
			end
			run.RenderStepped:Wait()
		end
		remote:FireServer(
			name
			,{
				[1]={ ['CFrame'] = needed1.CFrame, SnapPart = needed1 };
				[2]= { ['CFrame'] = needed2.CFrame, SnapPart = needed2 };
			}
		)
	elseif placeMode == 3 then
		local needed1 = nil
		local s = os.clock()+2
		local cf, basepart, attahment = v[2] , v[4], v[5]
		local attach1
		while needed1 == nil and os.clock()<s do
			for ii, vv in ipairs(placed[basepart]:GetDescendants()) do
				if vv:IsA('BasePart') and vv.Name == attachments[ attahment ] then
					needed1 = vv
					break
				end
			end
			run.RenderStepped:Wait()
		end
		remote:FireServer(
			name
			,{
				[1]={ ['CFrame'] = needed1.CFrame; SnapPart = needed1 };
				[2]= { ['CFrame'] = cf, BasePart = base };
			}
		)
	elseif placeMode == 4 then -- new pipe base to base
		remote:FireServer(
			name
			,{
				{CFrame = v[2], BasePart = base},
				{CFrame = v[4], BasePart = base}
			}
		)
	elseif placeMode == 5 then -- new pipe from smth to land
		local s = os.clock()+2
		local cf1 = v[2]
		local basepart = v[5]
		local attachindex = v[4]
		local stoploop = false
		while not stoploop and os.clock()<s do
			for ii, vv in ipairs(placed[basepart]:GetDescendants()) do
				if vv:IsA('BasePart') and vv.Name == attachments[ attachindex ] then
					attachindex = vv
					stoploop = true
					break
				end
			end
			run.RenderStepped:Wait()
		end

		remote:FireServer(
			name, 
			{
				{CFrame = attachindex.CFrame, SnapPart = attachindex};
				{CFrame = cf1, BasePart = base};
			}
		)
	elseif placeMode == 6 then -- new pipe from snap to snap
		local s = os.clock()+3
		local snap1, attach1, snap2, attach2 = v[4], v[5], v[6], v[7]

		local loop = true
		while loop and os.clock()<s do
			for ii, vv in ipairs(placed[snap1]:GetDescendants()) do
				if vv:IsA('BasePart') and vv.Name == attachments[ attach1 ] then
					attach1 = vv
					loop = false
					break
				end
			end
			run.RenderStepped:Wait()
		end
		loop = true
		while loop and os.clock()<s do
			for ii, vv in ipairs(placed[snap2]:GetDescendants()) do
				if vv:IsA('BasePart') and vv.Name == attachments[ attach2 ] then
					attach2 = vv
					loop = false
					break
				end
			end
			run.RenderStepped:Wait()
		end

		remote:FireServer(
			name, 
			{
				{CFrame = attach1.CFrame, SnapPart = attach1};
				{CFrame = attach2.CFrame, SnapPart = attach2};
			}
		)
	end
end

local emptyReference = Instance.new('Model')

local a, b = pcall(function()

	local stopped = false

	billboard.StopButton.ZIndex = 1000
	billboard.StopButton.MouseButton1Click:Connect(function()
		stopped = true
	end)

	for i, v in ipairs(tbl) do
		if stopped == true then break end

		local name = names[v[1]]
		local send = os.clock() + 60*4
		local partstart = os.clock()
		local tries = 0

		local found = false

		local con = structures.ChildAdded:Connect(function(nig)
			local model = nig
			local builder
			for iii = 1, 20 do
				builder = model:GetAttribute('Builder')
				if not builder then
					task.wait(iii<15 and 0.01 or .25)
				else
					break
				end
			end
			if model.Name == name and builder and (builder == lplr.Name or builder == lplr.DisplayName ) then
				local ss = os.clock()+5
				while ss>os.clock() and model.PrimaryPart == nil do run.RenderStepped:Wait() end
				for aboba = 0, 1, 0.2 do

					if not workspace:IsAncestorOf(model) then return end
					
					local modelPos = partsToFind[name] ~= nil and model:WaitForChild(partsToFind[name], 5).Position or (model.PrimaryPart and model.PrimaryPart.CFrame or (model:FindFirstChildOfClass('Part') or model:FindFirstChildOfClass('MeshPart')).CFrame ).Position

					if isInsideBrick(modelPos) then
						found = model
						break
					else
						if aboba<0.6 then
							run.RenderStepped:Wait()
						else
							task.wait( math.random(20, 40)/100 )
						end
					end
				end
				if found == false then
					warn(model, 'didnt match')
				end
				
			end
		end)

		coroutine.wrap(function()
			local structName = names[v[1]]
			local pipeSnapToSnap = v[3] == 6

			local isCap = string.find(structName, 'Cap')
			while found == false and os.clock()<send and tries<15/.2 and not stopped do

				tries += structName == 'Reservoir' and 12 or 1
				billboard.Structure.TextLabel.Text = name..' '..math.round( os.clock()-partstart )..'s'
				placeStructure(i, v, tries)

				if tries>2 and isCap or pipeSnapToSnap then
					found = emptyReference
					break
				end

				task.wait( (isCap or pipeSnapToSnap) and .02 or .5)
			end
		end)()

		repeat run.RenderStepped:Wait() until found~=false or os.clock()>send
		con:Disconnect()
		if found then
			placed[i] = found
			enableShield(found)
		end
		
		if os.clock()>send then
			warn(i, v[i], 'failed')
			break
		end

	end
end)



p:Destroy()
billboard:Destroy()

print(a, b)
