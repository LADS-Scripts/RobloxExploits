names = {'Wall','Submersible','Four-Way','Pipe','Cap','Distributor','Fabricator','Distributor Cap','Arc Turret','Shield Generator','Spawn Point','Automechanic','Arsenal','T-Junction','Elbow','Point Defense','Upgrade Station','Reservoir','Turret',};
attachments = {'FemaleFlange','FemaleFlange4','FemaleFlange2','FemaleFlange3','FemaleFlange1','WallSnap1','WallSnap2',};
local n
local cf = function(xp, yp, zp, xr, yr, zr)
	return cfn(xp, yp, zp)*cfa(xr,yr,zr)
end
cfn, cfa = CFrame.new, CFrame.fromEulerAnglesYXZ
local tbl = {
{1,cf(0.0150,4.0060,5.0000,1.5710,-3.1420,0.0000),0},{2,cf(-0.1110,9.3000,4.6180,0.0000,-0.0000,0.0000),0},{3,cf(-0.8000,-2.1000,0.0000,1.5710,1.5710,0.0000),1,1,2,2},{3,cf(0.0000,-2.1000,0.8000,1.5710,3.1420,0.0000),1,3,3,2},{3,cf(-0.5080,8.9100,-19.9680,0.3060,-0.0000,-0.0000),0},{4,cf(0.0000,0.0000,0.0000,-0.0000,0.0000,0.0000),6,5,3,4,3},{5,cf(0.0000,-0.4000,0.6000,-1.5710,-0.0000,0.0000),1,2,5},{1,cf(-8.4690,5.7920,-10.9060,1.5710,-1.5710,0.0000),0},{6,cf(-22.2240,8.4240,-19.2920,-0.2620,1.5710,-1.5710),0},{4,cf(0.0000,0.0000,0.0000,-0.0000,0.0000,0.0000),6,9,1,5,4},{5,cf(-0.1550,-0.4000,0.5800,-1.5710,-0.2620,0.0000),1,5,4},{2,cf(-4.3280,9.3000,5.2900,0.0000,0.0000,0.0000),0},{4,cf(0.0000,0.0000,0.0000,-0.0000,0.0000,0.0000),6,12,1,3,5},{7,cf(-32.4600,4.4580,-15.8290,1.5710,-1.5710,0.0000),0},{8,cf(-0.5800,-0.4000,0.1550,-1.5710,-1.3090,0.0000),1,1,14},{9,cf(-0.1560,4.1130,0.4910,-0.0000,1.5710,-1.5710),0},{8,cf(-0.6000,-0.4000,0.0000,-1.5710,-1.5710,0.0000),1,1,16},{2,cf(4.0960,9.3000,5.5050,-0.0000,0.0000,0.0000),0},{4,cf(0.0000,0.0000,0.0000,-0.0000,0.0000,0.0000),6,18,1,3,4},{7,cf(-32.4600,4.5770,-12.2360,1.5710,-1.5710,0.0000),0},{8,cf(-0.5800,-0.4000,-0.1550,-1.5710,-1.8330,0.0000),1,1,20},{2,cf(-0.1220,11.6790,4.4170,0.0000,-0.0000,0.0000),0},{3,cf(-0.8000,-2.1000,0.0000,1.5710,1.5710,0.0000),1,1,22,2},{3,cf(0.0000,-2.1000,0.8000,1.5710,3.1420,0.0000),1,3,23,2},{5,cf(-0.3000,-0.4000,0.5200,-1.5710,-0.5240,0.0000),1,3,24},{4,cf(0.0000,0.0000,0.0000,-0.0000,0.0000,0.0000),6,4,4,24,4},{2,cf(3.9660,11.6790,5.3380,-0.0000,0.0000,0.0000),0},{4,cf(0.0000,0.0000,0.0000,-0.0000,0.0000,0.0000),6,27,1,23,4},{10,cf(-12.9780,5.6240,-15.3390,-0.0000,0.0000,1.5710),0},{8,cf(-0.6000,-0.4000,0.0000,-1.5710,-1.5710,0.0000),1,1,29},{9,cf(-31.1750,6.2410,-15.1720,-0.0000,3.1420,1.5710),0},{8,cf(-0.5800,-0.4000,-0.1550,-1.5710,-1.8330,0.0000),1,1,31},{7,cf(-32.4600,4.6200,-8.5730,1.5710,-1.5710,0.0000),0},{8,cf(-0.5800,-0.4000,-0.1550,-1.5710,-1.8330,0.0000),1,1,33},{2,cf(-4.5290,11.6790,5.3430,-0.0000,0.0000,0.0000),0},{4,cf(0.0000,0.0000,0.0000,-0.0000,0.0000,0.0000),6,35,1,23,5},{1,cf(-27.4340,9.3150,-14.1290,0.0000,0.0000,-0.0000),0},{1,cf(-8.0000,-2.0000,0.0000,-0.0000,3.1420,0.0000),1,6,37,7},{1,cf(-8.0000,-2.0000,0.0000,-0.0000,3.1420,-0.0000),1,6,8,7},{1,cf(0.0000,-2.0000,-8.0000,0.0000,1.5710,0.0000),1,7,37,7},{1,cf(-8.0000,-2.0000,0.0000,-0.0000,3.1420,0.0000),1,6,40,7},{11,cf(-10.3000,17.6000,-17.5530,0.0000,-1.5710,1.5710),0},{8,cf(-0.6000,-0.4000,0.0000,-1.5710,-1.5710,0.0000),1,1,42},{7,cf(-32.4600,4.6640,-4.9370,1.5710,-1.5710,0.0000),0},{8,cf(-0.5800,-0.4000,-0.1550,-1.5710,-1.8330,0.0000),1,1,44},{2,cf(-0.1580,14.0580,4.2270,-0.0000,0.0000,0.0000),0},{3,cf(-0.8000,-2.1000,0.0000,1.5710,1.5710,0.0000),1,1,46,2},{3,cf(0.0000,-2.1000,0.8000,1.5710,3.1420,0.0000),1,3,47,2},{5,cf(-0.3000,-0.4000,0.5200,-1.5710,-0.5240,0.0000),1,3,48},{2,cf(3.9740,14.0590,5.4500,0.0000,-0.0000,0.0000),0},{4,cf(0.0000,0.0000,0.0000,-0.0000,0.0000,0.0000),6,50,1,47,4},{4,cf(0.0000,0.0000,0.0000,-0.0000,0.0000,0.0000),6,24,5,48,5},{7,cf(-32.4600,4.7560,-1.4380,1.5710,-1.5710,0.0000),0},{8,cf(-0.6000,-0.4000,0.0000,-1.5710,-1.5710,0.0000),1,1,53},{9,cf(-7.4470,13.8240,-14.0670,0.0000,-1.5710,0.0000),0},{9,cf(-13.0760,13.8240,-14.0660,-0.0000,1.5710,0.0000),0},{8,cf(-0.6000,-0.4000,0.0000,-1.5710,-1.5710,0.0000),1,1,55},{8,cf(-0.6000,-0.4000,0.0000,-1.5710,-1.5710,0.0000),1,1,56},{10,cf(-26.3540,13.8240,-14.1500,-0.0000,1.5710,-0.0000),0},{8,cf(-0.6000,-0.4000,0.0000,-1.5710,-1.5710,0.0000),1,1,59},{10,cf(-26.6030,32.0210,-14.1740,0.0000,-1.5710,-3.1420),0},{8,cf(-0.6000,-0.4000,0.0000,-1.5710,-1.5710,0.0000),1,1,61},{9,cf(-19.0490,22.9880,-14.1830,-1.5710,-1.5710,0.0000),0},{9,cf(-19.0490,27.9710,-14.1800,1.5710,1.5710,0.0000),0},{8,cf(-0.6000,-0.4000,-0.0000,-1.5710,-1.5710,0.0000),1,1,64},{8,cf(-0.6000,-0.4000,0.0000,-1.5710,-1.5710,0.0000),1,1,63},{2,cf(-4.4920,14.0580,5.0780,0.0000,-0.0000,0.0000),0},{4,cf(0.0000,0.0000,0.0000,-0.0000,0.0000,0.0000),6,67,1,47,5},{1,cf(8.5010,5.9010,-10.8420,1.5710,1.5710,0.0000),0},{1,cf(8.0000,-2.0000,0.0000,-0.0000,0.0000,0.0000),1,7,69,7},{1,cf(27.4550,9.4240,-13.9440,-0.0000,0.0000,0.0000),0},{1,cf(0.0000,-2.0000,-8.0000,0.0000,1.5710,-0.0000),1,6,71,7},{1,cf(-8.0000,-2.0000,0.0000,-0.0000,3.1420,0.0000),1,6,72,7},{1,cf(8.0000,-2.0000,0.0000,0.0000,0.0000,0.0000),1,7,71,7},{7,cf(32.4920,6.3030,-15.6290,-1.5710,-1.5710,0.0000),0},{8,cf(-0.6000,-0.4000,0.0000,-1.5710,-1.5710,0.0000),1,1,75},{6,cf(20.6190,9.2930,-19.1390,-0.5240,-1.5710,1.5710),0},{4,cf(0.0000,0.0000,0.0000,-0.0000,0.0000,0.0000),6,77,1,5,5},{7,cf(32.4930,6.3690,-11.3380,-1.5710,-1.5710,0.0000),0},{8,cf(-0.5800,-0.4000,-0.1550,-1.5710,-1.8330,0.0000),1,1,79},{7,cf(32.4930,6.2800,-7.8060,-1.5710,-1.5710,0.0000),0},{8,cf(-0.5800,-0.4000,-0.1550,-1.5710,-1.8330,0.0000),1,1,81},{7,cf(32.4940,6.2480,-3.7520,-1.5710,-1.5710,0.0000),0},{8,cf(-0.5800,-0.4000,-0.1550,-1.5670,3.0300,-1.7140),1,1,83},{9,cf(6.1300,13.9320,-14.1850,0.0000,-1.5710,0.0000),0},{9,cf(15.0670,13.9320,-14.3270,-0.0000,1.5710,0.0000),0},{8,cf(-0.6000,-0.4000,-0.0000,-1.5710,-1.5710,0.0000),1,1,85},{8,cf(-0.6000,-0.4000,-0.0000,-1.5710,-1.5710,0.0000),1,1,86},{9,cf(24.0650,13.9320,-14.1820,0.0000,-1.5710,-0.0000),0},{8,cf(-0.6000,-0.4000,0.0000,-1.5700,-0.0080,-1.6070),1,1,89},{10,cf(35.3590,13.9330,-6.1810,-0.0000,0.0000,0.0000),0},{8,cf(-0.6000,-0.4000,0.0000,-1.5710,-1.5710,0.0000),1,1,91},{10,cf(35.5990,32.1300,-5.2100,-0.0000,0.0000,-3.1420),0},{8,cf(-0.6000,-0.4000,0.0000,-1.5710,-1.5710,0.0000),1,1,93},{12,cf(27.2540,9.0240,-6.2850,0.0000,3.1420,-0.0000),0},{8,cf(-0.3000,-0.4000,-0.5200,-1.5710,-2.6180,0.0000),1,1,95},{12,cf(-27.0080,8.9110,-6.0560,0.0000,-3.1420,-0.0000),0},{8,cf(-0.6000,-0.4000,0.0000,-1.5710,-1.5710,0.0000),1,1,97},{2,cf(-0.1550,16.4360,4.1320,-0.0000,0.0000,0.0000),0},{2,cf(3.8910,16.4370,5.4020,-0.0000,0.0000,0.0000),0},{2,cf(-4.6110,16.4360,5.0540,-0.0000,0.0000,0.0000),0},{3,cf(-0.8000,-2.1000,0.0000,1.5710,1.5710,0.0000),1,1,99,2},{3,cf(0.0000,-2.1000,0.8000,1.5710,-3.1420,0.0000),1,3,102,2},{4,cf(0.0000,0.0000,0.0000,-0.0000,0.0000,0.0000),6,100,1,102,4},{4,cf(0.0000,0.0000,0.0000,-0.0000,0.0000,0.0000),6,102,5,101,1},{4,cf(0.0000,0.0000,0.0000,-0.0000,0.0000,0.0000),6,48,4,103,4},{5,cf(0.0000,-0.4000,0.6000,-1.5710,0.0000,0.0000),1,3,103},{2,cf(-0.1700,18.8150,3.9990,-0.0000,0.0000,0.0000),0},{2,cf(3.7780,18.8160,5.4280,-0.0000,0.0000,0.0000),0},{2,cf(-4.2800,18.8150,5.1010,-0.0000,0.0000,0.0000),0},{3,cf(-0.8000,-2.1000,0.0000,1.5710,1.5710,0.0000),1,1,108,2},{3,cf(0.0000,-2.1000,0.8000,1.5710,-3.1420,0.0000),1,3,111,2},{4,cf(0.0000,0.0000,0.0000,-0.0000,0.0000,0.0000),6,111,4,109,1},{4,cf(0.0000,0.0000,0.0000,-0.0000,0.0000,0.0000),6,111,5,110,1},{4,cf(0.0000,0.0000,0.0000,-0.0000,0.0000,0.0000),6,103,5,112,5},{2,cf(-0.1980,21.1950,3.8350,-0.0000,0.0000,0.0000),0},{2,cf(3.7420,21.1950,5.4590,-0.0000,0.0000,0.0000),0},{2,cf(-4.4330,21.1940,5.1580,-0.0000,0.0000,0.0000),0},{3,cf(-0.8000,-2.1000,0.0000,1.5710,1.5710,0.0000),1,1,116,2},{3,cf(0.0000,-2.1000,0.8000,1.5710,-3.1420,0.0000),1,3,119,2},{4,cf(0.0000,0.0000,0.0000,-0.0000,0.0000,0.0000),6,119,4,117,1},{4,cf(0.0000,0.0000,0.0000,-0.0000,0.0000,0.0000),6,119,5,118,1},{5,cf(-0.1550,-0.4000,0.5800,-1.5710,-0.2620,0.0000),1,3,120},{4,cf(0.0000,0.0000,0.0000,-0.0000,0.0000,0.0000),6,112,4,120,4},{7,cf(-32.4570,4.6470,3.0160,1.5710,-1.5710,0.0000),0},{8,cf(-0.5800,-0.4000,-0.1550,-1.5700,0.1800,1.2250),1,1,125},{7,cf(32.4940,6.2290,0.4940,-1.5710,-1.5710,0.0000),0},{8,cf(-0.5800,-0.4000,-0.1550,-1.5690,3.0340,-1.7100),1,1,127},{2,cf(-0.2590,23.5740,3.6750,-0.0000,0.0000,0.0000),0},{2,cf(3.6320,23.5740,5.2640,-0.0000,0.0000,0.0000),0},{2,cf(-4.4550,23.5740,4.9390,-0.0000,0.0000,0.0000),0},{3,cf(-0.8000,-2.1000,0.0000,1.5710,1.5710,0.0000),1,1,129,2},{3,cf(0.0000,-2.1000,0.8000,1.5710,3.1420,0.0000),1,3,132,2},{4,cf(0.0000,0.0000,0.0000,-0.0000,0.0000,0.0000),6,120,5,133,5},{4,cf(0.0000,0.0000,0.0000,-0.0000,0.0000,0.0000),6,132,4,130,1},{4,cf(0.0000,0.0000,0.0000,-0.0000,0.0000,0.0000),6,132,5,131,1},{2,cf(-0.2610,25.9530,3.6170,-0.0000,0.0000,0.0000),0},{2,cf(3.4890,25.9530,5.0510,-0.0000,0.0000,0.0000),0},{2,cf(-4.5710,25.9530,4.8390,-0.0000,0.0000,0.0000),0},{5,cf(0.0000,-0.4000,0.6000,-1.5710,-0.0000,0.0000),1,3,133},{3,cf(-0.8000,-2.1000,0.0000,1.5710,1.5710,0.0000),1,1,137,2},{3,cf(0.0000,-2.1000,0.8000,1.5710,3.1420,0.0000),1,3,141,2},{4,cf(0.0000,0.0000,0.0000,-0.0000,0.0000,0.0000),6,138,1,141,4},{4,cf(0.0000,0.0000,0.0000,-0.0000,0.0000,0.0000),6,141,5,139,1},{4,cf(0.0000,0.0000,0.0000,-0.0000,0.0000,0.0000),6,133,4,142,4},{13,cf(10.9800,26.1870,-17.4670,1.5710,-3.1420,0.0000),0},{13,cf(11.0620,23.3430,-24.3670,1.5710,3.1420,0.0000),0},{14,cf(-0.0000,-2.1000,0.8000,-1.5710,0.0000,0.0000),1,1,146,5},{15,cf(0.5750,-1.0000,0.8000,0.0000,1.5710,-1.5710),1,4,148,3},{4,cf(0.0000,0.0000,0.0000,-0.0000,0.0000,0.0000),6,149,5,147,1},{4,cf(0.0000,0.0000,0.0000,-0.0000,0.0000,0.0000),6,148,3,142,3},{2,cf(-0.2200,28.3320,3.5180,-0.0000,0.0000,0.0000),0},{2,cf(3.3440,28.3320,4.9550,-0.0000,0.0000,0.0000),0},{2,cf(-4.5160,28.3320,4.7770,-0.0000,0.0000,0.0000),0},{3,cf(-0.8000,-2.1000,0.0000,1.5710,1.5710,0.0000),1,1,152,2},{3,cf(0.0000,-2.1000,0.8000,1.5710,3.1420,0.0000),1,3,155,2},{4,cf(0.0000,0.0000,0.0000,-0.0000,0.0000,0.0000),6,142,5,156,5},{4,cf(0.0000,0.0000,0.0000,-0.0000,0.0000,0.0000),6,155,4,153,1},{4,cf(0.0000,0.0000,0.0000,-0.0000,0.0000,0.0000),6,155,5,154,1},{5,cf(0.0000,-0.4000,0.6000,-1.5710,-0.0000,0.0000),1,3,156},{10,cf(-38.8580,14.3820,-7.9750,-0.0000,0.0000,1.5710),0},{10,cf(-38.8580,19.3060,-7.9130,-0.0000,0.0000,1.5710),0},{10,cf(-38.8590,24.1150,-7.9120,-0.0000,0.0000,1.5710),0},{10,cf(-38.8590,28.8750,-7.9410,-0.0000,0.0000,1.5710),0},{8,cf(-0.6000,-0.4000,0.0000,-1.5710,-1.5710,0.0000),1,1,161},{8,cf(-0.6000,-0.4000,0.0000,-1.5710,-1.5710,0.0000),1,1,162},{8,cf(-0.6000,-0.4000,-0.0000,-1.5710,-1.5710,0.0000),1,1,163},{8,cf(-0.6000,-0.4000,-0.0000,-1.5710,-1.5710,0.0000),1,1,164},{10,cf(-38.8590,30.1320,0.3310,-0.0000,0.0000,1.5710),0},{10,cf(-38.8570,25.3140,0.2730,-0.0000,0.0000,1.5710),0},{8,cf(-0.6000,-0.4000,-0.0000,-1.5710,-1.5710,0.0000),1,1,169},{8,cf(-0.6000,-0.4000,0.0000,-1.5710,-1.5710,0.0000),1,1,170},{10,cf(38.8800,14.7980,-7.2750,-0.0000,0.0000,-1.5710),0},{10,cf(38.8790,19.6950,-7.2920,-0.0000,0.0000,-1.5710),0},{10,cf(38.8790,24.4900,-7.3220,-0.0000,0.0000,-1.5710),0},{10,cf(38.8780,29.6350,-7.3080,-0.0000,0.0000,-1.5710),0},{8,cf(-0.6000,-0.4000,0.0000,-1.5710,-1.5710,0.0000),1,1,176},{8,cf(-0.6000,-0.4000,0.0000,-1.5710,-1.5710,0.0000),1,1,175},{8,cf(-0.6000,-0.4000,0.0000,-1.5710,-1.5710,0.0000),1,1,174},{8,cf(-0.6000,-0.4000,0.0000,-1.5710,-1.5710,0.0000),1,1,173},{10,cf(38.8790,29.5860,1.2040,-0.0000,0.0000,-1.5710),0},{10,cf(38.8790,24.4580,1.1780,-0.0000,0.0000,-1.5710),0},{8,cf(-0.6000,-0.4000,0.0000,-1.5710,-1.5710,0.0000),1,1,181},{8,cf(-0.6000,-0.4000,0.0000,-1.5710,-1.5710,0.0000),1,1,182},{16,cf(-22.3450,27.0530,-17.6500,0.0000,-1.5710,1.5710),0},{8,cf(-0.4240,-0.4000,-0.4240,-1.5690,-2.6990,2.0460),1,1,185},{17,cf(-6.5620,17.5850,-18.7490,-0.0000,1.5710,-1.5710),0},{4,cf(0.0000,0.0000,0.0000,-0.0000,0.0000,0.0000),6,112,3,187,1},{16,cf(10.7010,23.2830,-31.2680,-1.5710,-0.0000,0.0000),0},{8,cf(-0.3000,-0.4000,0.5200,-1.5710,-0.5240,0.0000),1,1,189},{2,cf(-0.2010,30.7110,3.3870,-0.0000,0.0000,0.0000),0},{2,cf(3.4830,30.7110,5.0550,-0.0000,0.0000,0.0000),0},{2,cf(-4.5460,30.7110,4.7020,-0.0000,0.0000,0.0000),0},{3,cf(-0.8000,-2.1000,0.0000,1.5710,1.5710,0.0000),1,1,191,2},{3,cf(0.0000,-2.1000,0.8000,1.5710,3.1420,0.0000),1,3,194,2},{4,cf(0.0000,0.0000,0.0000,-0.0000,0.0000,0.0000),6,156,4,195,4},{4,cf(0.0000,0.0000,0.0000,-0.0000,0.0000,0.0000),6,194,4,192,1},{4,cf(0.0000,0.0000,0.0000,-0.0000,0.0000,0.0000),6,194,5,193,1},{5,cf(0.0000,-0.4000,0.6000,-1.5710,-0.0000,0.0000),1,3,195},{2,cf(-0.2180,33.0900,3.1180,-0.0000,0.0000,0.0000),0},{2,cf(3.7280,33.0910,5.4790,-0.0000,0.0000,0.0000),0},{2,cf(-4.5300,33.0900,4.7740,-0.0000,0.0000,0.0000),0},{3,cf(-0.8000,-2.1000,0.0000,1.5710,1.5710,0.0000),1,1,200,2},{3,cf(0.0000,-2.1000,0.8000,1.5710,3.1420,0.0000),1,3,203,2},{4,cf(0.0000,0.0000,0.0000,-0.0000,0.0000,0.0000),6,195,5,204,5},{4,cf(0.0000,0.0000,0.0000,-0.0000,0.0000,0.0000),6,203,4,201,1},{4,cf(0.0000,0.0000,0.0000,-0.0000,0.0000,0.0000),6,203,5,202,1},{5,cf(-0.1550,-0.4000,0.5800,-1.5710,-0.2620,0.0000),1,3,204},{2,cf(-0.2800,35.4690,3.0590,-0.0000,0.0000,0.0000),0},{3,cf(-0.8000,-2.1000,0.0000,1.5710,1.5710,0.0000),1,1,209,2},{3,cf(0.0000,-2.1000,0.8000,1.5710,3.1420,0.0000),1,3,210,2},{4,cf(0.0000,0.0000,0.0000,-0.0000,0.0000,0.0000),6,204,4,211,4},{18,cf(16.0870,31.0620,-10.4210,1.5710,-0.0000,0.0000),0},{4,cf(0.0000,0.0000,0.0000,-0.0000,0.0000,0.0000),6,210,4,213,1},{18,cf(-15.4350,31.0910,-10.6070,1.5710,-0.0000,0.0000),0},{4,cf(0.0000,0.0000,0.0000,-0.0000,0.0000,0.0000),6,215,1,210,5},{16,cf(-27.6690,43.3540,-11.6080,0.0000,-1.5710,1.5710),0},{8,cf(-0.4240,-0.4000,-0.4240,-1.5710,-2.3560,0.0000),1,1,217},{16,cf(-6.3310,43.1180,-11.6080,-0.0000,1.5710,-1.5710),0},{8,cf(-0.3000,-0.4000,0.5200,-1.5710,-0.5240,0.0000),1,1,219},{16,cf(7.0730,43.4800,-11.4200,0.0000,-1.5710,1.5710),0},{8,cf(-0.3000,-0.4000,-0.5200,-1.5710,-2.6180,0.0000),1,1,221},{16,cf(26.7830,43.5230,-11.4200,-0.0000,1.5710,-1.5710),0},{8,cf(-0.4240,-0.4000,0.4240,-1.5710,-0.7850,0.0000),1,1,223},{16,cf(31.3320,6.4470,-19.3270,1.5710,3.1420,0.0000),0},{8,cf(-0.6000,-0.4000,-0.0000,-1.5710,-1.5710,0.0000),1,1,225},{16,cf(-32.0780,5.6080,-19.4060,1.5710,3.1420,0.0000),0},{8,cf(-0.5800,-0.4000,-0.1550,-1.5710,-1.8330,0.0000),1,1,227},{16,cf(-10.6210,34.3380,-19.2610,-1.3090,3.1420,-3.1420),0},{8,cf(-0.5800,-0.4000,-0.1550,-1.5710,-1.8330,0.0000),1,1,229},{16,cf(-34.2730,34.7970,-19.4060,-1.3090,3.1420,-3.1420),0},{8,cf(-0.3000,-0.4000,0.5200,-1.5710,-0.5240,0.0000),1,1,231},{16,cf(34.7360,35.5250,-19.4150,-1.3090,3.1420,3.1420),0},{16,cf(23.4220,35.5220,-19.4150,-1.3090,3.1420,-3.1420),0},{8,cf(-0.5800,-0.4000,-0.1550,-1.5710,-1.8330,0.0000),1,1,234},{8,cf(-0.5800,-0.4000,-0.1550,-1.5710,-1.8330,0.0000),1,1,233},{16,cf(34.5670,23.9030,-17.4670,0.0000,1.5710,-1.5710),0},{8,cf(-0.5800,-0.4000,-0.1550,-1.5710,-1.8330,0.0000),1,1,237},{16,cf(-34.7200,22.5970,-17.6530,0.0000,1.5710,-1.5710),0},{8,cf(-0.5200,-0.4000,-0.3000,-1.5710,-2.0940,0.0000),1,1,239},{12,cf(-20.8850,8.9150,-4.8250,-0.0000,0.0000,-0.0000),0},{8,cf(-0.6000,-0.4000,0.0000,-1.5710,-1.5710,0.0000),1,1,241},{12,cf(20.7760,9.0240,-4.4710,-0.0000,0.0000,-0.0000),0},{8,cf(-0.6000,-0.4000,0.0000,-1.5710,-1.5710,0.0000),1,1,243},{12,cf(22.1180,30.6830,0.1420,1.5710,2.8800,0.0000),0},{12,cf(-22.4850,32.0300,0.0490,1.5710,-2.8800,0.0000),0},{8,cf(-0.5800,-0.4000,-0.1550,-1.5710,-1.8330,0.0000),1,1,245},{8,cf(-0.5800,-0.4000,0.1550,-1.5710,-1.3090,0.0000),1,1,246},{16,cf(-5.7350,46.0920,-4.2780,-0.0000,0.0000,-0.0000),0},{8,cf(-0.6000,-0.4000,0.0000,-1.5710,-1.5710,0.0000),1,1,249},{16,cf(5.5910,46.0620,-4.3830,-0.0000,0.0000,-0.0000),0},{8,cf(-0.6000,-0.4000,0.0000,-1.5710,-1.5710,0.0000),1,1,251},{16,cf(-27.4850,46.0920,-2.9560,-0.0000,0.0000,-0.0000),0},{8,cf(-0.6000,-0.4000,0.0000,-1.5710,-1.5710,0.0000),1,1,253},{16,cf(27.3950,46.0620,-3.2440,-0.0000,0.0000,-0.0000),0},{8,cf(-0.6000,-0.4000,0.0000,-1.5710,-1.5710,0.0000),1,1,255},{19,cf(-11.6400,3.8320,-19.3920,-0.0000,-1.5710,1.5710),0},{19,cf(11.5140,3.9170,-19.3270,0.0000,1.5710,-1.5710),0},{8,cf(-0.6000,-0.4000,0.0000,-1.5710,-1.5710,0.0000),1,1,258},{8,cf(-0.6000,-0.4000,0.0000,-1.5710,-1.5710,0.0000),1,1,257},}




local import = function(toimport)
	return typeof(toimport) == "number" and game:GetObjects("rbxassetid://" .. toimport)[1] or syn and loadstring(syn.request({Url = toimport}).Body)() or loadstring(game:HttpGetAsync(toimport))()
end



local billboard = import(9184931264)
local remote = game:GetService("ReplicatedStorage").Shared.Remotes.PlaceStructure
local buttonRemote = game:GetService("ReplicatedStorage").Shared.Remotes.ContextButton
local lplr = game:GetService('Players').LocalPlayer
local mouse = lplr:GetMouse()
mouse.Button1Down:Wait()
local base = mouse.Target

local placed = {}
local structures = workspace:WaitForChild('Structures')
local run = game:GetService('RunService')
local buildstart = os.clock()



local partsToFind = {
	UpgradeStation = 'Part';
	Arsenal = 'TeamColor';
	['Point Defense'] = 'TeamColor'
}



local _mmreg = {}
local newline = [[
]]
local mmreg = setmetatable({},{
	__newindex = function(_, i, v)
		_mmreg[i..'min'] = _mmreg[i..'min'] ~= nil and math.min(v-11, _mmreg[i..'min']) or  math.huge
		_mmreg[i..'max'] = _mmreg[i..'max'] ~= nil and math.max(v+11, _mmreg[i..'max']) or -math.huge
	end;
	__index = function(_, i)
		return _mmreg[i]
	end;
	__tostring = function()
		local r = ''
		for i, v in pairs(_mmreg) do
			r..=i..' = '..v..newline
		end
		return r
	end
})

for _, v in ipairs(tbl) do
	local pos = v[2].Position
	mmreg.X = pos.X
	mmreg.Y = pos.Y
	mmreg.Z = pos.Z
end

local mincf = CFrame.new(_mmreg.Xmin,_mmreg.Ymin,_mmreg.Zmin)
local maxcf = CFrame.new(_mmreg.Xmax,_mmreg.Ymax,_mmreg.Zmax)

local p = Instance.new('Part', workspace.CurrentCamera)
p.Anchored = true
p.CanCollide = false
p.CanQuery = false
p.Material = Enum.Material.ForceField
p.Size = Vector3.new(maxcf.X-mincf.X,maxcf.Y-mincf.Y,maxcf.Z-mincf.Z)
p.Color = Color3.new(1,.2, .2)
p.CFrame =base.CFrame* CFrame.new( (maxcf.p+mincf.p)/2 )

print(p.CFrame.Position - workspace.CurrentCamera.CFrame.Position)

billboard.Parent = game.CoreGui
billboard.Adornee = p

local totalParts = #tbl
local hsize = p.Size/2
local partCF = p.CFrame

task.delay(60*10, function()
	game.Debris:AddItem(p, 1)
end)

_rancalls = 0
local ranpos = function()
	_rancalls+=1
	if _rancalls>=10000 then
		_rancalls = math.random(-10000, 1000)
	end

	math.randomseed(_rancalls)
	return Vector3.new(
		math.random(-7000, 7000)
		,math.random(-7000, 7000)
		,math.random(-7000, 7000)
	)/40000
end


function isInsideBrick(position)
	local v3 = partCF:PointToObjectSpace(position)
	return (math.abs(v3.X) <= hsize.X)
		and (math.abs(v3.Y) <= hsize.Y)
		and (math.abs(v3.Z) <= hsize.Z)
end






local shields = {}

local enableShield = function(found)
	local foundClone = found
	if foundClone.Name == 'Shield Generator' then
		coroutine.wrap(function()
			local enabled = shields[foundClone]
			if enabled == nil then
				shields[foundClone] = true
			else
				return
			end
			
			if foundClone:WaitForChild('EnableButton', 5) and foundClone.EnableButton:WaitForChild('ContextButton', 5) then
				task.wait(5)
				buttonRemote:FireServer(foundClone.EnableButton.ContextButton)
			end
		end)()
	end
end

local placeStructure = function(i, v, tries)
	local name = names[v[1]]

	billboard.ProgressTotal.Bar.Size = UDim2.fromScale(i/totalParts, 1)
	billboard.ProgressTotal.TextLabel.Text = tostring( math.round(i/totalParts*100) )..'%     '..i..'/'..totalParts..'     '..math.round(os.clock()-buildstart)..'s'
	--billboard.Structure.TextLabel.Text = name
	billboard.StudsOffset = Vector3.new(0, hsize.Y*1.1+5, 0)

	local placeMode = v[3]
	if placeMode == 0 then
		remote:FireServer(
			name
			,{
				['BasePart'] = base;
				['CFrame'] = v[2] + (tries <5 and Vector3.new() or ranpos()) * (tries < 25 and .1 or i/200 )
			}
		)
	elseif placeMode == 1 then -- four way
		local needed = nil
		local s = os.clock()+2
		while needed == nil and os.clock()<s do
			for ii, vv in ipairs(placed[v[5]]:GetDescendants()) do
				if vv:IsA('BasePart') and vv.Name == attachments[ v[4] ] then
					needed = vv
					break
				end
			end
			run.RenderStepped:Wait()
		end
		remote:FireServer(
			name
			,{
				['BasePart'] = needed ;
				['CFrame'] = v[2]
			}
			,string.find(name, 'Cap') and 'FemaleFlange' or attachments[ v[6] or v[4] ]
			,needed
		)
	elseif placeMode == 2 then
		local needed1 = nil
		local s = os.clock()+2
		local cf1, cf2 = v[4], v[5]
		local attach1, attach2 = v[6], v[7]
		while needed1 == nil and os.clock()<s do
			for ii, vv in ipairs(placed[cf1]:GetDescendants()) do
				if vv:IsA('BasePart') and vv.Name == attachments[ attach1 ] then
					needed1 = vv
					break
				end
			end
			run.RenderStepped:Wait()
		end
		local needed2 = nil
		local s = os.clock()+2
		while needed2 == nil and os.clock()<s do
			for ii, vv in ipairs(placed[cf2]:GetDescendants()) do
				if vv:IsA('BasePart') and vv.Name == attachments[ attach2 ] then
					needed2 = vv
					break
				end
			end
			run.RenderStepped:Wait()
		end
		remote:FireServer(
			name
			,{
				[1]={ ['CFrame'] = needed1.CFrame, SnapPart = needed1 };
				[2]= { ['CFrame'] = needed2.CFrame, SnapPart = needed2 };
			}
		)
	elseif placeMode == 3 then
		local needed1 = nil
		local s = os.clock()+2
		local cf, basepart, attahment = v[2] , v[4], v[5]
		local attach1
		while needed1 == nil and os.clock()<s do
			for ii, vv in ipairs(placed[basepart]:GetDescendants()) do
				if vv:IsA('BasePart') and vv.Name == attachments[ attahment ] then
					needed1 = vv
					break
				end
			end
			run.RenderStepped:Wait()
		end
		remote:FireServer(
			name
			,{
				[1]={ ['CFrame'] = needed1.CFrame; SnapPart = needed1 };
				[2]= { ['CFrame'] = cf, BasePart = base };
			}
		)
	elseif placeMode == 4 then -- new pipe base to base
		remote:FireServer(
			name
			,{
				{CFrame = v[2], BasePart = base},
				{CFrame = v[4], BasePart = base}
			}
		)
	elseif placeMode == 5 then -- new pipe from smth to land
		local s = os.clock()+2
		local cf1 = v[2]
		local basepart = v[5]
		local attachindex = v[4]
		local stoploop = false
		while not stoploop and os.clock()<s do
			for ii, vv in ipairs(placed[basepart]:GetDescendants()) do
				if vv:IsA('BasePart') and vv.Name == attachments[ attachindex ] then
					attachindex = vv
					stoploop = true
					break
				end
			end
			run.RenderStepped:Wait()
		end

		remote:FireServer(
			name, 
			{
				{CFrame = attachindex.CFrame, SnapPart = attachindex};
				{CFrame = cf1, BasePart = base};
			}
		)
	elseif placeMode == 6 then -- new pipe from snap to snap
		local s = os.clock()+3
		local snap1, attach1, snap2, attach2 = v[4], v[5], v[6], v[7]

		local loop = true
		while loop and os.clock()<s do
			for ii, vv in ipairs(placed[snap1]:GetDescendants()) do
				if vv:IsA('BasePart') and vv.Name == attachments[ attach1 ] then
					attach1 = vv
					loop = false
					break
				end
			end
			run.RenderStepped:Wait()
		end
		loop = true
		while loop and os.clock()<s do
			for ii, vv in ipairs(placed[snap2]:GetDescendants()) do
				if vv:IsA('BasePart') and vv.Name == attachments[ attach2 ] then
					attach2 = vv
					loop = false
					break
				end
			end
			run.RenderStepped:Wait()
		end

		remote:FireServer(
			name, 
			{
				{CFrame = attach1.CFrame, SnapPart = attach1};
				{CFrame = attach2.CFrame, SnapPart = attach2};
			}
		)
	end
end

local emptyReference = Instance.new('Model')

local a, b = pcall(function()

	local stopped = false

	billboard.StopButton.ZIndex = 1000
	billboard.StopButton.MouseButton1Click:Connect(function()
		stopped = true
	end)

	for i, v in ipairs(tbl) do
		if stopped == true then break end

		local name = names[v[1]]
		local send = os.clock() + 60*4
		local partstart = os.clock()
		local tries = 0

		local found = false

		local con = structures.ChildAdded:Connect(function(nig)
			local model = nig
			local builder
			for iii = 1, 20 do
				builder = model:GetAttribute('Builder')
				if not builder then
					task.wait(iii<15 and 0.01 or .25)
				else
					break
				end
			end
			if model.Name == name and builder and (builder == lplr.Name or builder == lplr.DisplayName ) then
				local ss = os.clock()+5
				while ss>os.clock() and model.PrimaryPart == nil do run.RenderStepped:Wait() end
				for aboba = 0, 1, 0.2 do

					if not workspace:IsAncestorOf(model) then return end
					
					local modelPos = partsToFind[name] ~= nil and model:WaitForChild(partsToFind[name], 5).Position or (model.PrimaryPart and model.PrimaryPart.CFrame or (model:FindFirstChildOfClass('Part') or model:FindFirstChildOfClass('MeshPart')).CFrame ).Position

					if isInsideBrick(modelPos) then
						found = model
						break
					else
						if aboba<0.6 then
							run.RenderStepped:Wait()
						else
							task.wait( math.random(20, 40)/100 )
						end
					end
				end
				if found == false then
					warn(model, 'didnt match')
				end
				
			end
		end)

		coroutine.wrap(function()
			local structName = names[v[1]]
			local pipeSnapToSnap = v[3] == 6

			local isCap = string.find(structName, 'Cap')
			while found == false and os.clock()<send and tries<15/.2 and not stopped do

				tries += structName == 'Reservoir' and 12 or 1
				billboard.Structure.TextLabel.Text = name..' '..math.round( os.clock()-partstart )..'s'
				placeStructure(i, v, tries)

				if tries>2 and isCap or pipeSnapToSnap then
					found = emptyReference
					break
				end

				task.wait( (isCap or pipeSnapToSnap) and .02 or .5)
			end
		end)()

		repeat run.RenderStepped:Wait() until found~=false or os.clock()>send
		con:Disconnect()
		if found then
			placed[i] = found
			enableShield(found)
		end
		
		if os.clock()>send then
			warn(i, v[i], 'failed')
			break
		end

	end
end)



p:Destroy()
billboard:Destroy()

print(a, b)